{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.22.2",
    "schemaVersion": 1005,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@fluid-experimental/tree!",
  "docComment": "/**\n * Fluid DDS storing a tree.\n *\n * @packageDocumentation\n */\n",
  "name": "@fluid-experimental/tree",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@fluid-experimental/tree!",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "@fluid-experimental/tree!areRevisionViewsSemanticallyEqual:function(1)",
          "docComment": "/**\n * Compare two views such that semantically equivalent node IDs are considered equal.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function areRevisionViewsSemanticallyEqual(treeViewA: "
            },
            {
              "kind": "Reference",
              "text": "TreeView",
              "canonicalReference": "@fluid-experimental/tree!TreeView:class"
            },
            {
              "kind": "Content",
              "text": ", idConverterA: "
            },
            {
              "kind": "Reference",
              "text": "NodeIdConverter",
              "canonicalReference": "@fluid-experimental/tree!NodeIdConverter:interface"
            },
            {
              "kind": "Content",
              "text": ", treeViewB: "
            },
            {
              "kind": "Reference",
              "text": "TreeView",
              "canonicalReference": "@fluid-experimental/tree!TreeView:class"
            },
            {
              "kind": "Content",
              "text": ", idConverterB: "
            },
            {
              "kind": "Reference",
              "text": "NodeIdConverter",
              "canonicalReference": "@fluid-experimental/tree!NodeIdConverter:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "treeViewA",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "idConverterA",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            },
            {
              "parameterName": "treeViewB",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "isOptional": false
            },
            {
              "parameterName": "idConverterB",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "isOptional": false
            }
          ],
          "name": "areRevisionViewsSemanticallyEqual"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!AttributionId:type",
          "docComment": "/**\n * An identifier associated with a session for the purpose of attributing its created content to some user/entity.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type AttributionId = "
            },
            {
              "kind": "Reference",
              "text": "UuidString",
              "canonicalReference": "@fluid-experimental/tree!UuidString:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "AttributionId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!BadPlaceValidationResult:type",
          "docComment": "/**\n * The result of validating a bad place.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type BadPlaceValidationResult = "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlaceValidationResult",
              "canonicalReference": "@fluid-experimental/tree!PlaceValidationResult:enum"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "PlaceValidationResult.Valid",
              "canonicalReference": "@fluid-experimental/tree!PlaceValidationResult.Valid:member"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "BadPlaceValidationResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!BadRangeValidationResult:type",
          "docComment": "/**\n * The result of validating a bad range.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type BadRangeValidationResult = "
            },
            {
              "kind": "Reference",
              "text": "Exclude",
              "canonicalReference": "!Exclude:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "RangeValidationResult",
              "canonicalReference": "@fluid-experimental/tree!RangeValidationResult:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "RangeValidationResultKind.Valid",
              "canonicalReference": "@fluid-experimental/tree!RangeValidationResultKind.Valid:member"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "BadRangeValidationResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!Build:interface",
          "docComment": "/**\n * Constructs a sequence of nodes, associates it with the supplied ID, and stores it for use in later changes. Does not modify the document.\n *\n * Valid if (transitively) all DetachedSequenceId are used according to their rules (use here counts as a destination), and all Nodes' identifiers are previously unused.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Build "
            }
          ],
          "releaseTag": "Public",
          "name": "Build",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Build#destination:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly destination: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "destination",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Build#source:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly source: "
                },
                {
                  "kind": "Reference",
                  "text": "BuildNode",
                  "canonicalReference": "@fluid-experimental/tree!BuildNode:type"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "TreeNodeSequence",
                  "canonicalReference": "@fluid-experimental/tree!TreeNodeSequence:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BuildNode",
                  "canonicalReference": "@fluid-experimental/tree!BuildNode:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "source",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Build#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeType.Build",
                  "canonicalReference": "@fluid-experimental/tree!ChangeType.Build:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!BuildInternal_0_0_2:interface",
          "docComment": "/**\n * Constructs a sequence of nodes, associates it with the supplied ID, and stores it for use in later changes. Does not modify the document.\n *\n * Valid if (transitively) all DetachedSequenceId are used according to their rules (use here counts as a destination), and all Nodes' identifiers are previously unused.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BuildInternal_0_0_2 "
            }
          ],
          "releaseTag": "Public",
          "name": "BuildInternal_0_0_2",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!BuildInternal_0_0_2#destination:member",
              "docComment": "/**\n * {@inheritdoc Build.destination}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly destination: "
                },
                {
                  "kind": "Reference",
                  "text": "DetachedSequenceId",
                  "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "destination",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!BuildInternal_0_0_2#source:member",
              "docComment": "/**\n * {@inheritdoc Build.source}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly source: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeNodeSequence",
                  "canonicalReference": "@fluid-experimental/tree!TreeNodeSequence:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BuildNodeInternal_0_0_2",
                  "canonicalReference": "@fluid-experimental/tree!BuildNodeInternal_0_0_2:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "source",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!BuildInternal_0_0_2#type:member",
              "docComment": "/**\n * {@inheritdoc Build.\"type\"}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeTypeInternal.Build",
                  "canonicalReference": "@fluid-experimental/tree!ChangeTypeInternal.Build:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!BuildInternal:interface",
          "docComment": "/**\n * Constructs a sequence of nodes, associates it with the supplied ID, and stores it for use in later changes. Does not modify the document.\n *\n * Valid if (transitively) all DetachedSequenceId are used according to their rules (use here counts as a destination), and all Nodes' identifiers are previously unused.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BuildInternal extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "BuildInternal_0_0_2",
              "canonicalReference": "@fluid-experimental/tree!BuildInternal_0_0_2:interface"
            },
            {
              "kind": "Content",
              "text": ", 'source'> "
            }
          ],
          "releaseTag": "Public",
          "name": "BuildInternal",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!BuildInternal#source:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly source: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeNodeSequence",
                  "canonicalReference": "@fluid-experimental/tree!TreeNodeSequence:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BuildNodeInternal",
                  "canonicalReference": "@fluid-experimental/tree!BuildNodeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "source",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!BuildNode:type",
          "docComment": "/**\n * Node or a detached sequence of nodes (referred to by a detached sequence ID) for use in a Build change. See `BuildTreeNode` for more.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type BuildNode = "
            },
            {
              "kind": "Reference",
              "text": "BuildTreeNode",
              "canonicalReference": "@fluid-experimental/tree!BuildTreeNode:interface"
            },
            {
              "kind": "Content",
              "text": " | number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "BuildNode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!BuildNodeInternal_0_0_2:type",
          "docComment": "/**\n * Node or a detached sequence of nodes (referred to by a detached sequence ID) for use in a Build change. See `BuildTreeNode` for more.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type BuildNodeInternal_0_0_2 = "
            },
            {
              "kind": "Reference",
              "text": "TreeNode",
              "canonicalReference": "@fluid-experimental/tree!TreeNode:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "BuildNodeInternal_0_0_2",
              "canonicalReference": "@fluid-experimental/tree!BuildNodeInternal_0_0_2:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "StableNodeId",
              "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "DetachedSequenceId",
              "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "BuildNodeInternal_0_0_2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!BuildNodeInternal:type",
          "docComment": "/**\n * Node or a detached sequence of nodes (referred to by a detached sequence ID) for use in a Build change. See `BuildTreeNode` for more.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type BuildNodeInternal = "
            },
            {
              "kind": "Reference",
              "text": "TreeNode",
              "canonicalReference": "@fluid-experimental/tree!TreeNode:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "BuildNodeInternal",
              "canonicalReference": "@fluid-experimental/tree!BuildNodeInternal:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "DetachedSequenceId",
              "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "BuildNodeInternal",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!BuildTreeNode:interface",
          "docComment": "/**\n * Node for use in a Build change, which is composed of a definition describing what this nodes type, an identifier identifying this node within the tree, and a payload containing an opaque serializable piece of data. An identifier can be provided explicitly if the node must be referred to before the results of the `Change` containing this BuildTreeNode can be observed. If `identifier` is not supplied, one will be generated for it in an especially efficient manner that allows for compact storage and transmission and thus this property should be omitted if convenient. See the SharedTree readme for more on the tree format.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BuildTreeNode extends "
            },
            {
              "kind": "Reference",
              "text": "HasVariadicTraits",
              "canonicalReference": "@fluid-experimental/tree!HasVariadicTraits:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "BuildNode",
              "canonicalReference": "@fluid-experimental/tree!BuildNode:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "BuildTreeNode",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!BuildTreeNode#definition:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "definition: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "definition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!BuildTreeNode#identifier:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "identifier?: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "identifier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!BuildTreeNode#payload:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "payload?: "
                },
                {
                  "kind": "Reference",
                  "text": "Payload",
                  "canonicalReference": "@fluid-experimental/tree!Payload:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "payload",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!Change:type",
          "docComment": "/**\n * A change that composes an Edit.\n *\n * `Change` objects can be conveniently constructed with the helper methods exported on a constant of the same name.\n *\n * @example\n *\n * Change.insert(sourceId, destination)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Change = "
            },
            {
              "kind": "Reference",
              "text": "Insert",
              "canonicalReference": "@fluid-experimental/tree!Insert:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Detach",
              "canonicalReference": "@fluid-experimental/tree!Detach:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Build",
              "canonicalReference": "@fluid-experimental/tree!Build:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "SetValue",
              "canonicalReference": "@fluid-experimental/tree!SetValue:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Constraint",
              "canonicalReference": "@fluid-experimental/tree!Constraint:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Change",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluid-experimental/tree!Change:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "Change: "
            },
            {
              "kind": "Content",
              "text": "{\n    build: (source: "
            },
            {
              "kind": "Reference",
              "text": "BuildNode",
              "canonicalReference": "@fluid-experimental/tree!BuildNode:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TreeNodeSequence",
              "canonicalReference": "@fluid-experimental/tree!TreeNodeSequence:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "BuildNode",
              "canonicalReference": "@fluid-experimental/tree!BuildNode:type"
            },
            {
              "kind": "Content",
              "text": ">, destination: number) => "
            },
            {
              "kind": "Reference",
              "text": "Build",
              "canonicalReference": "@fluid-experimental/tree!Build:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    insert: (source: number, destination: "
            },
            {
              "kind": "Reference",
              "text": "StablePlace",
              "canonicalReference": "@fluid-experimental/tree!StablePlace:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Insert",
              "canonicalReference": "@fluid-experimental/tree!Insert:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    detach: (source: "
            },
            {
              "kind": "Reference",
              "text": "StableRange",
              "canonicalReference": "@fluid-experimental/tree!StableRange:interface"
            },
            {
              "kind": "Content",
              "text": ", destination?: number | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "Detach",
              "canonicalReference": "@fluid-experimental/tree!Detach:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    setPayload: (nodeToModify: "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": ", payload: "
            },
            {
              "kind": "Reference",
              "text": "Payload",
              "canonicalReference": "@fluid-experimental/tree!Payload:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "SetValue",
              "canonicalReference": "@fluid-experimental/tree!SetValue:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    clearPayload: (nodeToModify: "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "SetValue",
              "canonicalReference": "@fluid-experimental/tree!SetValue:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    constraint: (toConstrain: "
            },
            {
              "kind": "Reference",
              "text": "StableRange",
              "canonicalReference": "@fluid-experimental/tree!StableRange:interface"
            },
            {
              "kind": "Content",
              "text": ", effect: "
            },
            {
              "kind": "Reference",
              "text": "ConstraintEffect",
              "canonicalReference": "@fluid-experimental/tree!ConstraintEffect:enum"
            },
            {
              "kind": "Content",
              "text": ", identityHash?: "
            },
            {
              "kind": "Reference",
              "text": "UuidString",
              "canonicalReference": "@fluid-experimental/tree!UuidString:type"
            },
            {
              "kind": "Content",
              "text": " | undefined, length?: number | undefined, contentHash?: "
            },
            {
              "kind": "Reference",
              "text": "UuidString",
              "canonicalReference": "@fluid-experimental/tree!UuidString:type"
            },
            {
              "kind": "Content",
              "text": " | undefined, parentNode?: "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": " | undefined, label?: "
            },
            {
              "kind": "Reference",
              "text": "TraitLabel",
              "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
            },
            {
              "kind": "Content",
              "text": " | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "Constraint",
              "canonicalReference": "@fluid-experimental/tree!Constraint:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    delete: (stableRange: "
            },
            {
              "kind": "Reference",
              "text": "StableRange",
              "canonicalReference": "@fluid-experimental/tree!StableRange:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Change",
              "canonicalReference": "@fluid-experimental/tree!Change:type"
            },
            {
              "kind": "Content",
              "text": ";\n    insertTree: (nodes: "
            },
            {
              "kind": "Reference",
              "text": "BuildNode",
              "canonicalReference": "@fluid-experimental/tree!BuildNode:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TreeNodeSequence",
              "canonicalReference": "@fluid-experimental/tree!TreeNodeSequence:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "BuildNode",
              "canonicalReference": "@fluid-experimental/tree!BuildNode:type"
            },
            {
              "kind": "Content",
              "text": ">, destination: "
            },
            {
              "kind": "Reference",
              "text": "StablePlace",
              "canonicalReference": "@fluid-experimental/tree!StablePlace:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Change",
              "canonicalReference": "@fluid-experimental/tree!Change:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    move: (source: "
            },
            {
              "kind": "Reference",
              "text": "StableRange",
              "canonicalReference": "@fluid-experimental/tree!StableRange:interface"
            },
            {
              "kind": "Content",
              "text": ", destination: "
            },
            {
              "kind": "Reference",
              "text": "StablePlace",
              "canonicalReference": "@fluid-experimental/tree!StablePlace:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Change",
              "canonicalReference": "@fluid-experimental/tree!Change:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "Change",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 62
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type",
          "docComment": "/**\n * A change that composes an Edit.\n *\n * `Change` objects can be conveniently constructed with the helper methods exported on a constant of the same name.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChangeInternal = "
            },
            {
              "kind": "Reference",
              "text": "InsertInternal",
              "canonicalReference": "@fluid-experimental/tree!InsertInternal:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "DetachInternal",
              "canonicalReference": "@fluid-experimental/tree!DetachInternal:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "BuildInternal",
              "canonicalReference": "@fluid-experimental/tree!BuildInternal:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "SetValueInternal",
              "canonicalReference": "@fluid-experimental/tree!SetValueInternal:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ConstraintInternal",
              "canonicalReference": "@fluid-experimental/tree!ConstraintInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChangeInternal",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluid-experimental/tree!ChangeInternal:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "ChangeInternal: "
            },
            {
              "kind": "Content",
              "text": "{\n    build: (source: "
            },
            {
              "kind": "Reference",
              "text": "TreeNodeSequence",
              "canonicalReference": "@fluid-experimental/tree!TreeNodeSequence:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "BuildNodeInternal",
              "canonicalReference": "@fluid-experimental/tree!BuildNodeInternal:type"
            },
            {
              "kind": "Content",
              "text": ">, destination: "
            },
            {
              "kind": "Reference",
              "text": "DetachedSequenceId",
              "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "BuildInternal",
              "canonicalReference": "@fluid-experimental/tree!BuildInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    insert: (source: "
            },
            {
              "kind": "Reference",
              "text": "DetachedSequenceId",
              "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type"
            },
            {
              "kind": "Content",
              "text": ", destination: "
            },
            {
              "kind": "Reference",
              "text": "StablePlaceInternal",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "InsertInternal",
              "canonicalReference": "@fluid-experimental/tree!InsertInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    detach: (source: "
            },
            {
              "kind": "Reference",
              "text": "StableRangeInternal",
              "canonicalReference": "@fluid-experimental/tree!StableRangeInternal:interface"
            },
            {
              "kind": "Content",
              "text": ", destination?: "
            },
            {
              "kind": "Reference",
              "text": "DetachedSequenceId",
              "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type"
            },
            {
              "kind": "Content",
              "text": " | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "DetachInternal",
              "canonicalReference": "@fluid-experimental/tree!DetachInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    setPayload: (nodeToModify: "
            },
            {
              "kind": "Reference",
              "text": "NodeData",
              "canonicalReference": "@fluid-experimental/tree!NodeData:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": ", payload: "
            },
            {
              "kind": "Reference",
              "text": "Payload",
              "canonicalReference": "@fluid-experimental/tree!Payload:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "SetValueInternal",
              "canonicalReference": "@fluid-experimental/tree!SetValueInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    clearPayload: (nodeToModify: "
            },
            {
              "kind": "Reference",
              "text": "NodeData",
              "canonicalReference": "@fluid-experimental/tree!NodeData:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "SetValueInternal",
              "canonicalReference": "@fluid-experimental/tree!SetValueInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    constraint: (toConstrain: "
            },
            {
              "kind": "Reference",
              "text": "StableRangeInternal",
              "canonicalReference": "@fluid-experimental/tree!StableRangeInternal:interface"
            },
            {
              "kind": "Content",
              "text": ", effect: "
            },
            {
              "kind": "Reference",
              "text": "ConstraintEffect",
              "canonicalReference": "@fluid-experimental/tree!ConstraintEffect:enum"
            },
            {
              "kind": "Content",
              "text": ", identityHash?: "
            },
            {
              "kind": "Reference",
              "text": "UuidString",
              "canonicalReference": "@fluid-experimental/tree!UuidString:type"
            },
            {
              "kind": "Content",
              "text": " | undefined, length?: number | undefined, contentHash?: "
            },
            {
              "kind": "Reference",
              "text": "UuidString",
              "canonicalReference": "@fluid-experimental/tree!UuidString:type"
            },
            {
              "kind": "Content",
              "text": " | undefined, parentNode?: "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": " | undefined, label?: "
            },
            {
              "kind": "Reference",
              "text": "TraitLabel",
              "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
            },
            {
              "kind": "Content",
              "text": " | undefined) => "
            },
            {
              "kind": "Reference",
              "text": "ConstraintInternal",
              "canonicalReference": "@fluid-experimental/tree!ConstraintInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    delete: (stableRange: "
            },
            {
              "kind": "Reference",
              "text": "StableRangeInternal",
              "canonicalReference": "@fluid-experimental/tree!StableRangeInternal:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "ChangeInternal",
              "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
            },
            {
              "kind": "Content",
              "text": ";\n    insertTree: (nodes: "
            },
            {
              "kind": "Reference",
              "text": "TreeNodeSequence",
              "canonicalReference": "@fluid-experimental/tree!TreeNodeSequence:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "BuildNodeInternal",
              "canonicalReference": "@fluid-experimental/tree!BuildNodeInternal:type"
            },
            {
              "kind": "Content",
              "text": ">, destination: "
            },
            {
              "kind": "Reference",
              "text": "StablePlaceInternal",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "ChangeInternal",
              "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
            },
            {
              "kind": "Content",
              "text": "[];\n    move: (source: "
            },
            {
              "kind": "Reference",
              "text": "StableRangeInternal",
              "canonicalReference": "@fluid-experimental/tree!StableRangeInternal:interface"
            },
            {
              "kind": "Content",
              "text": ", destination: "
            },
            {
              "kind": "Reference",
              "text": "StablePlaceInternal",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "ChangeInternal",
              "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
            },
            {
              "kind": "Content",
              "text": "[];\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "ChangeInternal",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 72
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!ChangeNode_0_0_2:type",
          "docComment": "/**\n * JSON-compatible Node type. Objects of this type will be persisted in internal change objects (under Edits) in the SharedTree history.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChangeNode_0_0_2 = "
            },
            {
              "kind": "Reference",
              "text": "TreeNode",
              "canonicalReference": "@fluid-experimental/tree!TreeNode:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChangeNode_0_0_2",
              "canonicalReference": "@fluid-experimental/tree!ChangeNode_0_0_2:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "StableNodeId",
              "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChangeNode_0_0_2",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!ChangeNode:type",
          "docComment": "/**\n * JSON-compatible Node type. Objects of this type will be persisted in internal change objects (under Edits) in the SharedTree history.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChangeNode = "
            },
            {
              "kind": "Reference",
              "text": "TreeNode",
              "canonicalReference": "@fluid-experimental/tree!TreeNode:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ChangeNode",
              "canonicalReference": "@fluid-experimental/tree!ChangeNode:type"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChangeNode",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!ChangeResult:type",
          "docComment": "/**\n * The result of applying a change within a transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ChangeResult = "
            },
            {
              "kind": "Reference",
              "text": "Result",
              "canonicalReference": "@fluid-experimental/tree!Result:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TransactionView",
              "canonicalReference": "@fluid-experimental/tree!TransactionView:class"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "TransactionFailure",
              "canonicalReference": "@fluid-experimental/tree!TransactionFailure:interface"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ChangeResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluid-experimental/tree!ChangeType:enum",
          "docComment": "/**\n * The type of a Change\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ChangeType "
            }
          ],
          "releaseTag": "Public",
          "name": "ChangeType",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ChangeType.Build:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Build = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Build",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ChangeType.Constraint:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Constraint = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "Constraint",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ChangeType.Detach:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Detach = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Detach",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ChangeType.Insert:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Insert = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Insert",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ChangeType.SetValue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SetValue = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "SetValue",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluid-experimental/tree!ChangeTypeInternal:enum",
          "docComment": "/**\n * The type of a Change\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ChangeTypeInternal "
            }
          ],
          "releaseTag": "Public",
          "name": "ChangeTypeInternal",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ChangeTypeInternal.Build:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Build = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Build",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ChangeTypeInternal.CompressedBuild:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CompressedBuild = "
                },
                {
                  "kind": "Content",
                  "text": "5"
                }
              ],
              "releaseTag": "Public",
              "name": "CompressedBuild",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ChangeTypeInternal.Constraint:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Constraint = "
                },
                {
                  "kind": "Content",
                  "text": "4"
                }
              ],
              "releaseTag": "Public",
              "name": "Constraint",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ChangeTypeInternal.Detach:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Detach = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Detach",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ChangeTypeInternal.Insert:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Insert = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Insert",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ChangeTypeInternal.SetValue:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SetValue = "
                },
                {
                  "kind": "Content",
                  "text": "3"
                }
              ],
              "releaseTag": "Public",
              "name": "SetValue",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-experimental/tree!Checkout:class",
          "docComment": "/**\n * A mutable Checkout of a SharedTree, allowing viewing and interactive transactional editing. Provides {@link https://en.wikipedia.org/wiki/Snapshot_isolation | snapshot-isolation} while editing.\n *\n * A Checkout always shows a consistent sequence of versions of the SharedTree, but it may skip intermediate versions, and may fall behind. In this case consistent means the sequence of versions could occur with fully synchronous shared tree access, though the timing of sequenced edits arriving to the Checkout may be later than they actually arrive in the SharedTree. Specifically no sequenced edits will arrive during an ongoing edit (to implement snapshot isolation): they will be applied asynchronously some time after the ongoing edit is ended.\n *\n * Events emitted by `Checkout` are documented in {@link CheckoutEvent}. Exceptions thrown during event handling will be emitted as error events, which are automatically surfaced as error events on the `SharedTree` used at construction time.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class Checkout extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitterWithErrorHandling",
              "canonicalReference": "@fluidframework/telemetry-utils!EventEmitterWithErrorHandling:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ICheckoutEvents",
              "canonicalReference": "@fluid-experimental/tree!ICheckoutEvents:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "IDisposable",
              "canonicalReference": "@fluidframework/common-definitions!IDisposable:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Checkout",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluid-experimental/tree!Checkout:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Checkout` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected constructor(tree: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": ", currentView: "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ", onEditCommitted: "
                },
                {
                  "kind": "Reference",
                  "text": "EditCommittedHandler",
                  "canonicalReference": "@fluid-experimental/tree!EditCommittedHandler:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tree",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "currentView",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "onEditCommitted",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#abortEdit:member(1)",
              "docComment": "/**\n * Ends the ongoing edit operation without committing it to the history. Can only be called if an edit is open.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abortEdit(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "abortEdit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#applyChanges:member(1)",
              "docComment": "/**\n * Applies the supplied changes to the tree and emits a change event. Must be called during an ongoing edit (see `openEdit()`/`closeEdit()`). `changes` must be well-formed and valid: it is an error if they do not apply cleanly.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "applyChanges(...changes: "
                },
                {
                  "kind": "Reference",
                  "text": "Change",
                  "canonicalReference": "@fluid-experimental/tree!Change:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "changes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "applyChanges"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#applyEdit:member(1)",
              "docComment": "/**\n * Convenience helper for applying an edit containing the given changes. Opens an edit, applies the given changes, and closes the edit. See (`openEdit()`/`applyChanges()`/`closeEdit()`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "applyEdit(...changes: "
                },
                {
                  "kind": "Reference",
                  "text": "Change",
                  "canonicalReference": "@fluid-experimental/tree!Change:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "changes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "applyEdit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#closeEdit:member(1)",
              "docComment": "/**\n * Ends the ongoing edit operation and commits it to the history.\n *\n * Malformed edits are considered an error, and will assert: All named detached sequences must have been used or theEdit is malformed.\n *\n * @returns the `id` of the committed edit\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeEdit(): "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "closeEdit"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!Checkout#currentView:member",
              "docComment": "/**\n * @returns the current view of the tree, including the result of changes applied so far during an edit. Note that any external edits (from other clients) will not added to view while there is a `currentEdit`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get currentView(): "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "currentView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#dispose:member(1)",
              "docComment": "/**\n * release all unmanaged resources e.g. unregister event listeners\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispose(error?: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "dispose"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!Checkout#disposed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "disposed: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "disposed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#emitChange:member(1)",
              "docComment": "/**\n * Send invalidation message for all changes since last call to emitChange. This must be called every time `currentView` could have changed. It is ok to make excessive calls to this: change notifications will be cheaply de-duplicated.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected emitChange(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "emitChange"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#getEditStatus:member(1)",
              "docComment": "/**\n * @returns the {@link EditStatus} of the current edit. Has no side effects. Can only be called if an edit is open.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEditStatus(): "
                },
                {
                  "kind": "Reference",
                  "text": "EditStatus",
                  "canonicalReference": "@fluid-experimental/tree!EditStatus:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getEditStatus"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#handleNewEdit:member(1)",
              "docComment": "/**\n * Take any needed action between when an edit is completed. Usually this will include submitting it to a SharedTree.\n *\n * Override this to customize.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected handleNewEdit(id: "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "ValidEditingResult",
                  "canonicalReference": "@fluid-experimental/tree!ValidEditingResult:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "handleNewEdit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#hintKnownEditingResult:member(1)",
              "docComment": "/**\n * Inform the Checkout that a particular edit is know to have a specific result when applied to a particular TreeView. This may be used as a caching hint to avoid recomputation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected hintKnownEditingResult(edit: "
                },
                {
                  "kind": "Reference",
                  "text": "Edit",
                  "canonicalReference": "@fluid-experimental/tree!Edit:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "ValidEditingResult",
                  "canonicalReference": "@fluid-experimental/tree!ValidEditingResult:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "edit",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "name": "hintKnownEditingResult"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!Checkout#latestCommittedView:member",
              "docComment": "/**\n * The view of the latest committed revision. Does not include changes from any open edits.\n *\n * When this changes, emitChange must be called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract get latestCommittedView(): "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "latestCommittedView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#openEdit:member(1)",
              "docComment": "/**\n * Opens a new edit operation. Changes accumulate in the edit via calls to `applyChanges()`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openEdit(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "openEdit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#rebaseCurrentEdit:member(1)",
              "docComment": "/**\n * Rebases the ongoing edit to the latest revision loaded by this 'Checkout'. If the rebase succeeds (none of the changes in the ongoing edit became invalid), the ongoing edit will remain open and the current view will reflect those changes.\n *\n * If the rebase fails (changes become invalid), the ongoing edit will be aborted and currentView will return to showing the newest committed revision as it always does when there is no ongoing edit.\n *\n * Must only be called during an open edit.\n *\n * @returns - the result of the rebase.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rebaseCurrentEdit(): "
                },
                {
                  "kind": "Reference",
                  "text": "EditValidationResult.Valid",
                  "canonicalReference": "@fluid-experimental/tree!EditValidationResult.Valid:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "EditValidationResult.Invalid",
                  "canonicalReference": "@fluid-experimental/tree!EditValidationResult.Invalid:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "rebaseCurrentEdit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#revert:member(1)",
              "docComment": "/**\n * Reverts a collection of edits.\n *\n * @param editIds - the edits to revert\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "revert(editId: "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "editId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "revert"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!Checkout#tree:member",
              "docComment": "/**\n * The shared tree this checkout views/edits.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tree: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tree",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#tryApplyChangesInternal:member(1)",
              "docComment": "/**\n * Applies the supplied changes to the tree and emits a change event. Must be called during an ongoing edit (see `openEdit()`/`closeEdit()`). `changes` must be well-formed and valid: it is an error if they do not apply cleanly.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected tryApplyChangesInternal(...changes: "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EditStatus",
                  "canonicalReference": "@fluid-experimental/tree!EditStatus:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "changes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "tryApplyChangesInternal"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#tryApplyEdit:member(1)",
              "docComment": "/**\n * Apply an edit, if valid, otherwise does nothing (the edit is not added to the history). If the edit applied, its changes will be immediately visible on this checkout, though it still may end up invalid once sequenced due to concurrent edits.\n *\n * @returns The EditId if the edit was valid and thus applied, and undefined if it was invalid and thus not applied.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryApplyEdit(...changes: "
                },
                {
                  "kind": "Reference",
                  "text": "Change",
                  "canonicalReference": "@fluid-experimental/tree!Change:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "changes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "tryApplyEdit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#waitForEditsToSubmit:member(1)",
              "docComment": "/**\n * @returns a Promise which completes after edits that were closed on this checkout (before calling this) have been submitted to Fluid. This does NOT wait for the Fluid service to ack them\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract waitForEditsToSubmit(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "waitForEditsToSubmit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Checkout#waitForPendingUpdates:member(1)",
              "docComment": "/**\n * @returns a Promise which completes after all currently known edits are available in this checkout.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract waitForPendingUpdates(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "waitForPendingUpdates"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "implementsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluid-experimental/tree!CheckoutEvent:enum",
          "docComment": "/**\n * An event emitted by a `Checkout` to indicate a state change. See {@link ICheckoutEvents} for event argument information.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum CheckoutEvent "
            }
          ],
          "releaseTag": "Public",
          "name": "CheckoutEvent",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!CheckoutEvent.ViewChange:member",
              "docComment": "/**\n * `currentView` has changed. Passed a before and after TreeView.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ViewChange = "
                },
                {
                  "kind": "Content",
                  "text": "\"viewChange\""
                }
              ],
              "releaseTag": "Public",
              "name": "ViewChange",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluid-experimental/tree!comparePayloads:function(1)",
          "docComment": "/**\n * @returns true if two `Payloads` are identical. May return false for equivalent payloads encoded differently.\n *\n * Object field order and object identity are not considered significant, and are ignored by this function. (This is because they may not be preserved through roundtrip).\n *\n * For other information which Fluid would lose on serialization round trip, behavior is unspecified other than this this function is reflective (all payloads are equal to themselves) and commutative (argument order does not matter).\n *\n * This means that any Payload is equal to itself and a deep clone of itself.\n *\n * Payloads might not be equal to a version of themselves that has been serialized then deserialized. If they are serialized then deserialized again, the two deserialized objects will compare equal, however the serialized strings may be unequal (due to field order for objects being unspecified).\n *\n * Fluid will cause lossy operations due to use of JSON.stringify(). This includes: - Loss of object identity - Loss of field order (may be ordered arbitrarily) - -0 becomes +0 - NaN, Infinity, -Infinity all become null - custom toJSON functions may cause arbitrary behavior - functions become undefined or null - non enumerable properties (including prototype) are lost - more (this is not a complete list)\n *\n * Inputs must not contain cyclic references other than fields set to their immediate parent (for the JavaScript feature detection pattern).\n *\n * IFluidHandle instances (detected via JavaScript feature detection pattern) are only compared by absolutePath.\n *\n * TODO:#54095: Is there a better way to do this comparison?\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function comparePayloads(a: "
            },
            {
              "kind": "Reference",
              "text": "Payload",
              "canonicalReference": "@fluid-experimental/tree!Payload:type"
            },
            {
              "kind": "Content",
              "text": ", b: "
            },
            {
              "kind": "Reference",
              "text": "Payload",
              "canonicalReference": "@fluid-experimental/tree!Payload:type"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "a",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "b",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "comparePayloads"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!CompressedId:type",
          "docComment": "/**\n * An identifier (UUID) that has been shortened by a distributed compression algorithm.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type CompressedId = "
            },
            {
              "kind": "Reference",
              "text": "FinalCompressedId",
              "canonicalReference": "@fluid-experimental/tree!FinalCompressedId:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "LocalCompressedId",
              "canonicalReference": "@fluid-experimental/tree!LocalCompressedId:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "CompressedId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!Constraint:interface",
          "docComment": "/**\n * A set of constraints on the validity of an Edit. A Constraint is used to detect when an Edit, due to other concurrent edits, may have unintended effects or merge in non-semantic ways. It is processed in order like any other Change in an Edit. It can cause an edit to fail if the various constraints are not met at the time of evaluation (ex: the parentNode has changed due to concurrent editing). Does not modify the document.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Constraint "
            }
          ],
          "releaseTag": "Public",
          "name": "Constraint",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Constraint#contentHash:member",
              "docComment": "/**\n * Require that the contents of all of the nodes in toConstrain hash to this value. Hash is an order dependant deep hash, which includes all subtree content recursively. TODO: implement and specify exact hash function.\n *\n * This is an efficient (O(1) space) way to constrain a sequence of nodes have exact values (transitively).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly contentHash?: "
                },
                {
                  "kind": "Reference",
                  "text": "UuidString",
                  "canonicalReference": "@fluid-experimental/tree!UuidString:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "contentHash",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Constraint#effect:member",
              "docComment": "/**\n * What to do if a constraint is not met.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly effect: "
                },
                {
                  "kind": "Reference",
                  "text": "ConstraintEffect",
                  "canonicalReference": "@fluid-experimental/tree!ConstraintEffect:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "effect",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Constraint#identityHash:member",
              "docComment": "/**\n * Require that the identities of all the nodes in toConstrain hash to this value. Hash is order dependent. TODO: implement and specify exact hash function.\n *\n * This is an efficient (O(1) space) way to constrain a sequence of nodes to have specific identities.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly identityHash?: "
                },
                {
                  "kind": "Reference",
                  "text": "UuidString",
                  "canonicalReference": "@fluid-experimental/tree!UuidString:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "identityHash",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Constraint#label:member",
              "docComment": "/**\n * Require that the trait under which toConstrain is located has this label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly label?: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLabel",
                  "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Constraint#length:member",
              "docComment": "/**\n * Require that the number of nodes in toConstrain is this value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly length?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "length",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Constraint#parentNode:member",
              "docComment": "/**\n * Require that parent under which toConstrain is located has this identifier.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly parentNode?: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "parentNode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Constraint#toConstrain:member",
              "docComment": "/**\n * Selects a sequence of nodes which will be checked against the constraints specified by the optional fields. If `toConstrain` is invalid, it will be treated like a constraint being unmet. Depending on `effect` this may or may not make the Edit invalid.\n *\n * When a constraint is not met, the effects is specified by `effect`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly toConstrain: "
                },
                {
                  "kind": "Reference",
                  "text": "StableRange",
                  "canonicalReference": "@fluid-experimental/tree!StableRange:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "toConstrain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Constraint#type:member",
              "docComment": "/**\n * Marker for which kind of Change this is.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeType.Constraint",
                  "canonicalReference": "@fluid-experimental/tree!ChangeType.Constraint:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluid-experimental/tree!ConstraintEffect:enum",
          "docComment": "/**\n * What to do when a Constraint is violated.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum ConstraintEffect "
            }
          ],
          "releaseTag": "Public",
          "name": "ConstraintEffect",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ConstraintEffect.InvalidAndDiscard:member",
              "docComment": "/**\n * Discard Edit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidAndDiscard = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "InvalidAndDiscard",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ConstraintEffect.InvalidRetry:member",
              "docComment": "/**\n * Discard Edit, but record metadata that application may want to try and recover this change by recreating it. Should this be the default policy for when another (non Constraint) change is invalid?\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InvalidRetry = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "InvalidRetry",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!ConstraintEffect.ValidRetry:member",
              "docComment": "/**\n * Apply the change, but flag it for possible reconsideration by the app (applying it is better than not, but perhaps the high level logic could produce something better).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ValidRetry = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "ValidRetry",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!ConstraintInternal_0_0_2:interface",
          "docComment": "/**\n * A set of constraints on the validity of an Edit. A Constraint is used to detect when an Edit, due to other concurrent edits, may have unintended effects or merge in non-semantic ways. It is processed in order like any other Change in an Edit. It can cause an edit to fail if the various constraints are not met at the time of evaluation (ex: the parentNode has changed due to concurrent editing). Does not modify the document.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ConstraintInternal_0_0_2 "
            }
          ],
          "releaseTag": "Public",
          "name": "ConstraintInternal_0_0_2",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ConstraintInternal_0_0_2#contentHash:member",
              "docComment": "/**\n * Require that the contents of all of the nodes in toConstrain hash to this value. Hash is an order dependant deep hash, which includes all subtree content recursively. TODO: implement and specify exact hash function.\n *\n * This is an efficient (O(1) space) way to constrain a sequence of nodes have exact values (transitively).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly contentHash?: "
                },
                {
                  "kind": "Reference",
                  "text": "UuidString",
                  "canonicalReference": "@fluid-experimental/tree!UuidString:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "contentHash",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ConstraintInternal_0_0_2#effect:member",
              "docComment": "/**\n * What to do if a constraint is not met.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly effect: "
                },
                {
                  "kind": "Reference",
                  "text": "ConstraintEffect",
                  "canonicalReference": "@fluid-experimental/tree!ConstraintEffect:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "effect",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ConstraintInternal_0_0_2#identityHash:member",
              "docComment": "/**\n * Require that the identities of all the nodes in toConstrain hash to this value. Hash is order dependent. TODO: implement and specify exact hash function.\n *\n * This is an efficient (O(1) space) way to constrain a sequence of nodes to have specific identities.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly identityHash?: "
                },
                {
                  "kind": "Reference",
                  "text": "UuidString",
                  "canonicalReference": "@fluid-experimental/tree!UuidString:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "identityHash",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ConstraintInternal_0_0_2#label:member",
              "docComment": "/**\n * Require that the trait under which toConstrain is located has this label.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly label?: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLabel",
                  "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ConstraintInternal_0_0_2#length:member",
              "docComment": "/**\n * Require that the number of nodes in toConstrain is this value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly length?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "length",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ConstraintInternal_0_0_2#parentNode:member",
              "docComment": "/**\n * Require that parent under which toConstrain is located has this identifier.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly parentNode?: "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "parentNode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ConstraintInternal_0_0_2#toConstrain:member",
              "docComment": "/**\n * Selects a sequence of nodes which will be checked against the constraints specified by the optional fields. If `toConstrain` is invalid, it will be treated like a constraint being unmet. Depending on `effect` this may or may not make the Edit invalid.\n *\n * When a constraint is not met, the effects is specified by `effect`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly toConstrain: "
                },
                {
                  "kind": "Reference",
                  "text": "StableRangeInternal_0_0_2",
                  "canonicalReference": "@fluid-experimental/tree!StableRangeInternal_0_0_2:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "toConstrain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ConstraintInternal_0_0_2#type:member",
              "docComment": "/**\n * Marker for which kind of Change this is.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeTypeInternal.Constraint",
                  "canonicalReference": "@fluid-experimental/tree!ChangeTypeInternal.Constraint:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!ConstraintInternal:interface",
          "docComment": "/**\n * A set of constraints on the validity of an Edit. A Constraint is used to detect when an Edit, due to other concurrent edits, may have unintended effects or merge in non-semantic ways. It is processed in order like any other Change in an Edit. It can cause an edit to fail if the various constraints are not met at the time of evaluation (ex: the parentNode has changed due to concurrent editing). Does not modify the document.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ConstraintInternal extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ConstraintInternal_0_0_2",
              "canonicalReference": "@fluid-experimental/tree!ConstraintInternal_0_0_2:interface"
            },
            {
              "kind": "Content",
              "text": ", 'toConstrain' | 'parentNode'> "
            }
          ],
          "releaseTag": "Public",
          "name": "ConstraintInternal",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ConstraintInternal#parentNode:member",
              "docComment": "/**\n * Require that parent under which toConstrain is located has this identifier.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly parentNode?: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "parentNode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ConstraintInternal#toConstrain:member",
              "docComment": "/**\n * Selects a sequence of nodes which will be checked against the constraints specified by the optional fields. If `toConstrain` is invalid, it will be treated like a constraint being unmet. Depending on `effect` this may or may not make the Edit invalid.\n *\n * When a constraint is not met, the effects is specified by `effect`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly toConstrain: "
                },
                {
                  "kind": "Reference",
                  "text": "StableRangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!StableRangeInternal:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "toConstrain",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!Definition:type",
          "docComment": "/**\n * Definition. A full (Uuid) persistable definition.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Definition = "
            },
            {
              "kind": "Reference",
              "text": "UuidString",
              "canonicalReference": "@fluid-experimental/tree!UuidString:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    readonly Definition: 'c0ef9488-2a78-482d-aeed-37fba996354c';\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Definition",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!Delta:interface",
          "docComment": "/**\n * Differences from one forest to another.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Delta<NodeId> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "NodeId",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Delta",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Delta#added:member",
              "docComment": "/**\n * Nodes that were added.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly added: "
                },
                {
                  "kind": "Content",
                  "text": "readonly NodeId[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "added",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Delta#changed:member",
              "docComment": "/**\n * Nodes whose content changed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly changed: "
                },
                {
                  "kind": "Content",
                  "text": "readonly NodeId[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "changed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Delta#removed:member",
              "docComment": "/**\n * Nodes that were removed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly removed: "
                },
                {
                  "kind": "Content",
                  "text": "readonly NodeId[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "removed",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!Detach:interface",
          "docComment": "/**\n * Removes a sequence of nodes from the tree. If a destination is specified, the detached sequence is associated with that ID and held for possible reuse by later changes in this same Edit (such as by an Insert). A Detach without a destination is a deletion of the specified sequence, as is a Detach with a destination that is not used later.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Detach "
            }
          ],
          "releaseTag": "Public",
          "name": "Detach",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Detach#destination:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly destination?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "destination",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Detach#source:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly source: "
                },
                {
                  "kind": "Reference",
                  "text": "StableRange",
                  "canonicalReference": "@fluid-experimental/tree!StableRange:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "source",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Detach#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeType.Detach",
                  "canonicalReference": "@fluid-experimental/tree!ChangeType.Detach:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type",
          "docComment": "/**\n * Scoped to a single edit: identifies a sequences of nodes that can be moved into a trait.\n *\n * Within a given Edit, any DetachedSequenceId must be a source at most once, and a destination at most once. If used as a source, it must be after it is used as a destination. If this is violated, the Edit is considered malformed.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type DetachedSequenceId = "
            },
            {
              "kind": "Content",
              "text": "number & {\n    readonly DetachedSequenceId: 'f7d7903a-194e-45e7-8e82-c9ef4333577d';\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "DetachedSequenceId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!DetachInternal_0_0_2:interface",
          "docComment": "/**\n * Removes a sequence of nodes from the tree. If a destination is specified, the detached sequence is associated with that ID and held for possible reuse by later changes in this same Edit (such as by an Insert). A Detach without a destination is a deletion of the specified sequence, as is a Detach with a destination that is not used later.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DetachInternal_0_0_2 "
            }
          ],
          "releaseTag": "Public",
          "name": "DetachInternal_0_0_2",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!DetachInternal_0_0_2#destination:member",
              "docComment": "/**\n * {@inheritdoc Detach.destination}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly destination?: "
                },
                {
                  "kind": "Reference",
                  "text": "DetachedSequenceId",
                  "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "destination",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!DetachInternal_0_0_2#source:member",
              "docComment": "/**\n * {@inheritdoc Detach.source}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly source: "
                },
                {
                  "kind": "Reference",
                  "text": "StableRangeInternal_0_0_2",
                  "canonicalReference": "@fluid-experimental/tree!StableRangeInternal_0_0_2:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "source",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!DetachInternal_0_0_2#type:member",
              "docComment": "/**\n * {@inheritdoc Detach.\"type\"}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeTypeInternal.Detach",
                  "canonicalReference": "@fluid-experimental/tree!ChangeTypeInternal.Detach:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!DetachInternal:interface",
          "docComment": "/**\n * Removes a sequence of nodes from the tree. If a destination is specified, the detached sequence is associated with that ID and held for possible reuse by later changes in this same Edit (such as by an Insert). A Detach without a destination is a deletion of the specified sequence, as is a Detach with a destination that is not used later.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface DetachInternal extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "DetachInternal_0_0_2",
              "canonicalReference": "@fluid-experimental/tree!DetachInternal_0_0_2:interface"
            },
            {
              "kind": "Content",
              "text": ", 'source'> "
            }
          ],
          "releaseTag": "Public",
          "name": "DetachInternal",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!DetachInternal#source:member",
              "docComment": "/**\n * {@inheritdoc Detach.source}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly source: "
                },
                {
                  "kind": "Reference",
                  "text": "StableRangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!StableRangeInternal:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "source",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-experimental/tree!EagerCheckout:class",
          "docComment": "/**\n * Checkout that always stays up to date with the SharedTree. This means that {@link EagerCheckout.waitForPendingUpdates} is always a no-op since EagerCheckout is always up to date.\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class EagerCheckout extends "
            },
            {
              "kind": "Reference",
              "text": "Checkout",
              "canonicalReference": "@fluid-experimental/tree!Checkout:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "EagerCheckout",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluid-experimental/tree!EagerCheckout:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `EagerCheckout` class\n *\n * @param tree - the tree\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(tree: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tree",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!EagerCheckout#latestCommittedView:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get latestCommittedView(): "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "latestCommittedView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!EagerCheckout#waitForEditsToSubmit:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForEditsToSubmit(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "waitForEditsToSubmit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!EagerCheckout#waitForPendingUpdates:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForPendingUpdates(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "waitForPendingUpdates"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!Edit:interface",
          "docComment": "/**\n * A collection of changes to the tree that are applied atomically along with a unique identifier for the edit. If any individual change fails to apply, the entire Edit will fail to apply.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Edit<TChange> extends "
            },
            {
              "kind": "Reference",
              "text": "EditBase",
              "canonicalReference": "@fluid-experimental/tree!EditBase:interface"
            },
            {
              "kind": "Content",
              "text": "<TChange> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TChange",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Edit",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Edit#id:member",
              "docComment": "/**\n * Unique identifier for this edit. Must never be reused. Used for referencing and de-duplicating edits.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly id: "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!EditApplicationOutcome:type",
          "docComment": "/**\n * The outcome of an edit.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EditApplicationOutcome = "
            },
            {
              "kind": "Content",
              "text": "{\n    readonly view: "
            },
            {
              "kind": "Reference",
              "text": "RevisionView",
              "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly status: "
            },
            {
              "kind": "Reference",
              "text": "EditStatus.Applied",
              "canonicalReference": "@fluid-experimental/tree!EditStatus.Applied:member"
            },
            {
              "kind": "Content",
              "text": ";\n} | {\n    readonly failure: "
            },
            {
              "kind": "Reference",
              "text": "TransactionInternal.Failure",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.Failure:type"
            },
            {
              "kind": "Content",
              "text": ";\n    readonly status: "
            },
            {
              "kind": "Reference",
              "text": "EditStatus.Invalid",
              "canonicalReference": "@fluid-experimental/tree!EditStatus.Invalid:member"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "EditStatus.Malformed",
              "canonicalReference": "@fluid-experimental/tree!EditStatus.Malformed:member"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EditApplicationOutcome",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 12
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!EditBase:interface",
          "docComment": "/**\n * The information included in an edit.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EditBase<TChange> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TChange",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "EditBase",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditBase#changes:member",
              "docComment": "/**\n * Actual changes to apply. Applied in order as part of a single transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly changes: "
                },
                {
                  "kind": "Content",
                  "text": "readonly TChange[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "changes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditBase#pastAttemptCount:member",
              "docComment": "/**\n * For edits which are being re-issued due to a conflict, the number of times this edit has already been attempted. Undefined means 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly pastAttemptCount?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "pastAttemptCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!EditCommittedEventArguments:interface",
          "docComment": "/**\n * The arguments included when the EditCommitted SharedTreeEvent is emitted.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EditCommittedEventArguments "
            }
          ],
          "releaseTag": "Public",
          "name": "EditCommittedEventArguments",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditCommittedEventArguments#editId:member",
              "docComment": "/**\n * The ID of the edit committed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly editId: "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "editId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditCommittedEventArguments#local:member",
              "docComment": "/**\n * Whether or not this is a local edit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly local: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "local",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditCommittedEventArguments#tree:member",
              "docComment": "/**\n * The tree the edit was committed on. Required for local edit events handled by SharedTreeUndoRedoHandler.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tree: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tree",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!EditCommittedHandler:type",
          "docComment": "/**\n * Expected type for a handler of the `EditCommitted` event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EditCommittedHandler = "
            },
            {
              "kind": "Content",
              "text": "(args: "
            },
            {
              "kind": "Reference",
              "text": "EditCommittedEventArguments",
              "canonicalReference": "@fluid-experimental/tree!EditCommittedEventArguments:interface"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EditCommittedHandler",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!EditHandle:interface",
          "docComment": "/**\n * EditHandles are used to load edit chunks stored outside of the EditLog. This is typically implemented by a wrapper around an IFluidHandle<ArrayBufferLike>.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EditHandle<TChange> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TChange",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "EditHandle",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditHandle#baseHandle:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly baseHandle: "
                },
                {
                  "kind": "Reference",
                  "text": "FluidEditHandle",
                  "canonicalReference": "@fluid-experimental/tree!FluidEditHandle:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "baseHandle",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditHandle#get:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly get: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "EditWithoutId",
                  "canonicalReference": "@fluid-experimental/tree!EditWithoutId:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TChange>[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "get",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!EditId:type",
          "docComment": "/**\n * Edit identifier\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EditId = "
            },
            {
              "kind": "Reference",
              "text": "UuidString",
              "canonicalReference": "@fluid-experimental/tree!UuidString:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    readonly EditId: '56897beb-53e4-4e66-85da-4bf5cd5d0d49';\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EditId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!EditingResult:type",
          "docComment": "/**\n * Result of applying a transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type EditingResult = "
            },
            {
              "kind": "Reference",
              "text": "FailedEditingResult",
              "canonicalReference": "@fluid-experimental/tree!FailedEditingResult:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "ValidEditingResult",
              "canonicalReference": "@fluid-experimental/tree!ValidEditingResult:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "EditingResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!EditingResultBase:interface",
          "docComment": "/**\n * Basic result of applying a transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EditingResultBase "
            }
          ],
          "releaseTag": "Public",
          "name": "EditingResultBase",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditingResultBase#before:member",
              "docComment": "/**\n * The revision preceding the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly before: "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "before",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditingResultBase#changes:member",
              "docComment": "/**\n * The valid changes applied as part of the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly changes: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "changes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditingResultBase#status:member",
              "docComment": "/**\n * The final status of the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly status: "
                },
                {
                  "kind": "Reference",
                  "text": "EditStatus",
                  "canonicalReference": "@fluid-experimental/tree!EditStatus:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditingResultBase#steps:member",
              "docComment": "/**\n * The editing steps applied as part of the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly steps: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "ReconciliationChange",
                  "canonicalReference": "@fluid-experimental/tree!ReconciliationChange:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "steps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!EditLogSummary:interface",
          "docComment": "/**\n * Information used to populate an edit log. In 0.1.1, this is a persisted type only for `EditLogSummary<CompressedChangeInternal, FluidEditHandle>`, where calling `FluidEditHandle.get` returns an array buffer of compressed `editChunk` contents. The type is parameterized to avoid nearly identical type definitions for uncompressed forms of the edit log, and abstracting away the fact that handle fetching needs to invoke decompression.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EditLogSummary<TChange, THandle> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TChange",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "THandle",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "EditLogSummary",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditLogSummary#editChunks:member",
              "docComment": "/**\n * A of list of serialized chunks and their corresponding keys. Start revision is the index of the first edit in the chunk in relation to the edit log.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly editChunks: "
                },
                {
                  "kind": "Content",
                  "text": "readonly {\n        readonly startRevision: number;\n        readonly chunk: THandle | readonly "
                },
                {
                  "kind": "Reference",
                  "text": "EditWithoutId",
                  "canonicalReference": "@fluid-experimental/tree!EditWithoutId:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TChange>[];\n    }[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "editChunks",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditLogSummary#editIds:member",
              "docComment": "/**\n * A list of edits IDs for all sequenced edits.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly editIds: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "editIds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluid-experimental/tree!EditStatus:enum",
          "docComment": "/**\n * The status code of an attempt to apply the changes in an Edit.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum EditStatus "
            }
          ],
          "releaseTag": "Public",
          "name": "EditStatus",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!EditStatus.Applied:member",
              "docComment": "/**\n * The edit was applied to the current view successfully.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Applied = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Applied",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!EditStatus.Invalid:member",
              "docComment": "/**\n * The edit contained a well-formed sequence of changes that couldn't be applied to the current view, generally because concurrent changes caused one or more merge conflicts.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Invalid = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Invalid",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!EditStatus.Malformed:member",
              "docComment": "/**\n * The edit contained one or more malformed changes (e.g. was missing required fields such as `id`), or contained a sequence of changes that could not possibly be applied sequentially without error (e.g. an edit which tries to insert the same detached node twice).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Malformed = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Malformed",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluid-experimental/tree!EditValidationResult:enum",
          "docComment": "/**\n * The result of validation of an Edit.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum EditValidationResult "
            }
          ],
          "releaseTag": "Public",
          "name": "EditValidationResult",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!EditValidationResult.Invalid:member",
              "docComment": "/**\n * The edit is well-formed but cannot be applied to the current view, generally because concurrent changes caused one or more merge conflicts. For example, the edit refers to the `StablePlace` after node `C`, but `C` has since been deleted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Invalid = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Invalid",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!EditValidationResult.Malformed:member",
              "docComment": "/**\n * The edit contained one or more malformed changes (e.g. was missing required fields such as `id`), or contained a sequence of changes that could not possibly be applied sequentially without error (e.g. an edit which tries to insert the same detached node twice).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Malformed = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Malformed",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!EditValidationResult.Valid:member",
              "docComment": "/**\n * The edit is well-formed and can be applied to the current view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Valid = "
                },
                {
                  "kind": "Content",
                  "text": "2"
                }
              ],
              "releaseTag": "Public",
              "name": "Valid",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!EditWithoutId:interface",
          "docComment": "/**\n * A collection of changes to the tree that are applied atomically. If any individual change fails to apply, the entire Edit will fail to apply.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface EditWithoutId<TChange> extends "
            },
            {
              "kind": "Reference",
              "text": "EditBase",
              "canonicalReference": "@fluid-experimental/tree!EditBase:interface"
            },
            {
              "kind": "Content",
              "text": "<TChange> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TChange",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "EditWithoutId",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!EditWithoutId#id:member",
              "docComment": "/**\n * Used to explicitly state that EditWithoutId cannot contain an id and prevents type Edit from being assigned to type EditWithoutId.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly id?: "
                },
                {
                  "kind": "Content",
                  "text": "never"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "id",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!FailedEditingResult:interface",
          "docComment": "/**\n * Result of applying an invalid or malformed transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FailedEditingResult extends "
            },
            {
              "kind": "Reference",
              "text": "EditingResultBase",
              "canonicalReference": "@fluid-experimental/tree!EditingResultBase:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "FailedEditingResult",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!FailedEditingResult#changes:member",
              "docComment": "/**\n * The valid changes applied as part of the transaction. Those were ultimately abandoned due to the transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly changes: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "changes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!FailedEditingResult#failure:member",
              "docComment": "/**\n * Information about what caused the transaction to fail.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly failure: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionInternal.Failure",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.Failure:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "failure",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!FailedEditingResult#status:member",
              "docComment": "/**\n * The final status of the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly status: "
                },
                {
                  "kind": "Reference",
                  "text": "EditStatus.Invalid",
                  "canonicalReference": "@fluid-experimental/tree!EditStatus.Invalid:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "EditStatus.Malformed",
                  "canonicalReference": "@fluid-experimental/tree!EditStatus.Malformed:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!FailedEditingResult#steps:member",
              "docComment": "/**\n * The editing steps applied as part of the transaction. Those were ultimately abandoned due to the transaction failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly steps: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "ReconciliationChange",
                  "canonicalReference": "@fluid-experimental/tree!ReconciliationChange:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "steps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!FailingTransactionState:interface",
          "docComment": "/**\n * The state of a transaction that has encountered an error.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FailingTransactionState extends "
            },
            {
              "kind": "Reference",
              "text": "TransactionFailure",
              "canonicalReference": "@fluid-experimental/tree!TransactionFailure:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "FailingTransactionState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!FailingTransactionState#changes:member",
              "docComment": "/**\n * The applied changes so far.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly changes: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "changes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!FailingTransactionState#steps:member",
              "docComment": "/**\n * The editing steps applied so far.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly steps: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "ReconciliationChange",
                  "canonicalReference": "@fluid-experimental/tree!ReconciliationChange:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "steps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!FailingTransactionState#view:member",
              "docComment": "/**\n * The view reflecting the latest applied change.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly view: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionView",
                  "canonicalReference": "@fluid-experimental/tree!TransactionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "view",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!FinalCompressedId:type",
          "docComment": "/**\n * A compressed ID that is local to a document. Stable across all revisions of a document starting from the one in which it was created. It should not be persisted outside of the history as it can only be decompressed in the context of the originating document. If external persistence is needed (e.g. by a client), a StableId should be used instead.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type FinalCompressedId = "
            },
            {
              "kind": "Content",
              "text": "number & {\n    readonly FinalCompressedId: '5d83d1e2-98b7-4e4e-a889-54c855cfa73d';\n    readonly OpNormalized: '9209432d-a959-4df7-b2ad-767ead4dbcae';\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "FinalCompressedId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!FluidEditHandle:interface",
          "docComment": "/**\n * FluidEditHandles are used to load edit chunks stored outside of the EditLog. Can be satisfied by IFluidHandle<ArrayBufferLike>. Note that though this is in `PersistedTypes`, it isn't directly serializable (e.g. `get` is a function). Its serialization relies on being encoded via an IFluidSerializer.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FluidEditHandle "
            }
          ],
          "releaseTag": "Public",
          "name": "FluidEditHandle",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!FluidEditHandle#absolutePath:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly absolutePath: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "absolutePath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!FluidEditHandle#get:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly get: "
                },
                {
                  "kind": "Content",
                  "text": "() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ArrayBuffer",
                  "canonicalReference": "!ArrayBuffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "get",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-experimental/tree!Forest:class",
          "docComment": "/**\n * An immutable forest of ForestNode. Enforces single parenting, and allows querying the parent.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Forest "
            }
          ],
          "releaseTag": "Public",
          "name": "Forest",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest#add:member(1)",
              "docComment": "/**\n * Adds the supplied nodes to the forest. The nodes' IDs must be unique in the forest.\n *\n * @param nodes - the sequence of nodes to add to the forest. If any of them have children which exist in the forest already, those children will be parented. Any trait arrays present in a node must be non-empty. The nodes may be provided in any order.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "add(nodes: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ForestNode",
                  "canonicalReference": "@fluid-experimental/tree!ForestNode:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Forest",
                  "canonicalReference": "@fluid-experimental/tree!Forest:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nodes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "name": "add"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest#assertConsistent:member(1)",
              "docComment": "/**\n * Checks that the metadata is correct, and the items form a forest. This is an expensive O(map size) operation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "assertConsistent(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "assertConsistent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest#attachRangeOfChildren:member(1)",
              "docComment": "/**\n * Parents a set of nodes already in the forest at a specified location within a trait.\n *\n * @param parentId - the id of the parent under which to insert the new nodes\n *\n * @param label - the label of the trait under which to insert the new nodes\n *\n * @param index - the index in the trait after which to insert the new nodes\n *\n * @param childIds - the ids of the nodes to insert\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attachRangeOfChildren(parentId: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ", label: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLabel",
                  "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ", index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", childIds: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Forest",
                  "canonicalReference": "@fluid-experimental/tree!Forest:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "parentId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "label",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "childIds",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 10
                  },
                  "isOptional": false
                }
              ],
              "name": "attachRangeOfChildren"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest.create:member(1)",
              "docComment": "/**\n * Creates a new Forest.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(expensiveValidation?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Forest",
                  "canonicalReference": "@fluid-experimental/tree!Forest:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expensiveValidation",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest#delete:member(1)",
              "docComment": "/**\n * Deletes every node in ids (each of which must be unparented)\n *\n * @param ids - The IDs of the nodes to delete.\n *\n * @param deleteChildren - If true, recursively deletes descendants. Otherwise, leaves children unparented.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(ids: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", deleteChildren: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Forest",
                  "canonicalReference": "@fluid-experimental/tree!Forest:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ids",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "deleteChildren",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": false
                }
              ],
              "name": "delete"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest#delta:member(1)",
              "docComment": "/**\n * Calculate the difference between two forests.\n *\n * @param forest - the other forest to compare to this one\n *\n * @param comparator - a function which returns true if two objects of type ForestNode are equivalent, false otherwise\n *\n * @returns A {@link Delta} listing which nodes must be changed, added, and removed to get from `this` to `forest`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delta(forest: "
                },
                {
                  "kind": "Reference",
                  "text": "Forest",
                  "canonicalReference": "@fluid-experimental/tree!Forest:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Delta",
                  "canonicalReference": "@fluid-experimental/tree!Delta:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "forest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "delta"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest#detachRangeOfChildren:member(1)",
              "docComment": "/**\n * Detaches a range of nodes from their parent. The detached nodes remain in the `Forest`.\n *\n * @param parentId - the id of the parent from which to detach the nodes\n *\n * @param label - the label of the trait from which to detach the nodes\n *\n * @param startIndex - the index of the first node in the range to detach\n *\n * @param endIndex - the index after the last node in the range to detach\n *\n * @returns a new `Forest` with the nodes detached, and a list of the ids of the nodes that were detached\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "detachRangeOfChildren(parentId: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ", label: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLabel",
                  "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ", startIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", endIndex: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        forest: "
                },
                {
                  "kind": "Reference",
                  "text": "Forest",
                  "canonicalReference": "@fluid-experimental/tree!Forest:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n        detached: readonly "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "parentId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "label",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "startIndex",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "endIndex",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ],
              "name": "detachRangeOfChildren"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest#equals:member(1)",
              "docComment": "/**\n * Compares two forests for equality.\n *\n * @param forest - the other forest to compare to this one\n *\n * @param comparator - a function which returns true if two objects of type ForestNode are equivalent, false otherwise\n *\n * @returns true iff the forests are equal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(forest: "
                },
                {
                  "kind": "Reference",
                  "text": "Forest",
                  "canonicalReference": "@fluid-experimental/tree!Forest:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "forest",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest#get:member(1)",
              "docComment": "/**\n * @returns the node associated with `id`. Should not be used if there is no node with the provided id.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ForestNode",
                  "canonicalReference": "@fluid-experimental/tree!ForestNode:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest#getParent:member(1)",
              "docComment": "/**\n * @returns the parent of `id`. Should not be used if there is no node with id or if id refers to the root node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getParent(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ParentData",
                  "canonicalReference": "@fluid-experimental/tree!ParentData:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getParent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest#has:member(1)",
              "docComment": "/**\n * @returns true if the node associated with `id` exists in this forest, otherwise false\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "has(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "has"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest#setValue:member(1)",
              "docComment": "/**\n * Replaces a node's value. The node must exist in this `Forest`.\n *\n * @param nodeId - the id of the node\n *\n * @param value - the new value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setValue(nodeId: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Reference",
                  "text": "Payload",
                  "canonicalReference": "@fluid-experimental/tree!Payload:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Forest",
                  "canonicalReference": "@fluid-experimental/tree!Forest:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nodeId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "name": "setValue"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!Forest#size:member",
              "docComment": "/**\n * Returns the number of nodes in the forest.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get size(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest#tryGet:member(1)",
              "docComment": "/**\n * @returns the node associated with `id`, or undefined if there is none\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryGet(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ForestNode",
                  "canonicalReference": "@fluid-experimental/tree!ForestNode:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "tryGet"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Forest#tryGetParent:member(1)",
              "docComment": "/**\n * @returns undefined iff root, otherwise the parent of `id`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryGetParent(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ParentData",
                  "canonicalReference": "@fluid-experimental/tree!ParentData:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "tryGetParent"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!ForestNode:interface",
          "docComment": "/**\n * A node that can be contained within a Forest\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ForestNode extends "
            },
            {
              "kind": "Reference",
              "text": "NodeData",
              "canonicalReference": "@fluid-experimental/tree!NodeData:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "ForestNode",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ForestNode#traits:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly traits: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMap",
                  "canonicalReference": "!ReadonlyMap:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TraitLabel",
                  "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ", readonly "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "traits",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-experimental/tree!GenericTransaction:class",
          "docComment": "/**\n * A mutable transaction for applying sequences of changes to a TreeView. Allows viewing the intermediate states.\n *\n * Contains necessary state to apply changes within an edit to a TreeView.\n *\n * May have any number of changes applied to make up the edit. Use `close` to complete the transaction, returning the array of changes and an EditingResult showing the results of applying the changes as an Edit to the initial TreeView (passed to the constructor).\n *\n * No data outside the Transaction is modified by Transaction: the results from `close` must be used to actually submit an `Edit`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class GenericTransaction "
            }
          ],
          "releaseTag": "Public",
          "name": "GenericTransaction",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluid-experimental/tree!GenericTransaction:constructor(1)",
              "docComment": "/**\n * Create and open an edit of the provided `TreeView`. After applying 0 or more changes, this editor should be closed via `close()`.\n *\n * @param view - the `TreeView` at which this edit begins. The first change will be applied against this view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(view: "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ", policy: "
                },
                {
                  "kind": "Reference",
                  "text": "GenericTransactionPolicy",
                  "canonicalReference": "@fluid-experimental/tree!GenericTransactionPolicy:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "view",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "policy",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!GenericTransaction#applyChange:member(1)",
              "docComment": "/**\n * Attempt to apply the given change as part of this edit. This method should not be called if a previous change in this edit failed to apply.\n *\n * @param change - the change to apply\n *\n * @param path - the reconciliation path for the change.\n *\n * @returns this\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "applyChange(change: "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": ", path?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReconciliationPath",
                  "canonicalReference": "@fluid-experimental/tree!ReconciliationPath:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "change",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "applyChange"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!GenericTransaction#applyChanges:member(1)",
              "docComment": "/**\n * A helper to apply a sequence of changes. Changes will be applied one after the other. If a change fails to apply, the remaining changes in `changes` will be ignored.\n *\n * @param changes - the sequence of changes to apply.\n *\n * @param path - the reconciliation path for the first change.\n *\n * @returns this\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "applyChanges(changes: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ", path?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReconciliationPath",
                  "canonicalReference": "@fluid-experimental/tree!ReconciliationPath:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "changes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": true
                }
              ],
              "name": "applyChanges"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!GenericTransaction#before:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly before: "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "before",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!GenericTransaction#changes:member",
              "docComment": "/**\n * The status code of the most recent attempted change.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get changes(): "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "changes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!GenericTransaction#close:member(1)",
              "docComment": "/**\n * @returns the final `EditStatus` and `TreeView` after all changes are applied.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(): "
                },
                {
                  "kind": "Reference",
                  "text": "EditingResult",
                  "canonicalReference": "@fluid-experimental/tree!EditingResult:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!GenericTransaction#isOpen:member",
              "docComment": "/**\n * Whether or not this transaction has been closed via `close()`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isOpen(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isOpen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!GenericTransaction#status:member",
              "docComment": "/**\n * The status code of the most recent attempted change.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get status(): "
                },
                {
                  "kind": "Reference",
                  "text": "EditStatus",
                  "canonicalReference": "@fluid-experimental/tree!EditStatus:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!GenericTransaction#steps:member",
              "docComment": "/**\n * The status code of the most recent attempted change.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get steps(): "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "ReconciliationChange",
                  "canonicalReference": "@fluid-experimental/tree!ReconciliationChange:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "steps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!GenericTransaction#view:member",
              "docComment": "/**\n * The most up-to-date `TreeView` for this edit. This is the state of the tree after all changes applied so far.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get view(): "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionView",
                  "canonicalReference": "@fluid-experimental/tree!TransactionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "view",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!GenericTransactionPolicy:interface",
          "docComment": "/**\n * An object that encapsulates the rules and state pertaining to a specific subclass of {@link GenericTransaction}. The characteristics that define such a subclass (and an implementation of this interface) are: - The type of change that can be applied - How those changes impact the state of the tree - How those changes are resolved in the face of concurrent changes - What makes a transaction valid - The kind of situations that might lead to a transaction failure\n *\n * Instances of this type are passed to the {@link GenericTransaction} constructor.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GenericTransactionPolicy "
            }
          ],
          "releaseTag": "Public",
          "name": "GenericTransactionPolicy",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!GenericTransactionPolicy#dispatchChange:member(1)",
              "docComment": "/**\n * Provides a new state given the current state and a change to apply.\n *\n * @param state - The current state on which the change is applied.\n *\n * @param change - The change to apply to the current state.\n *\n * @returns The new state reflecting the applied change, or a failure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dispatchChange(state: "
                },
                {
                  "kind": "Reference",
                  "text": "SucceedingTransactionState",
                  "canonicalReference": "@fluid-experimental/tree!SucceedingTransactionState:interface"
                },
                {
                  "kind": "Content",
                  "text": ", change: "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeResult",
                  "canonicalReference": "@fluid-experimental/tree!ChangeResult:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "state",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "change",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "dispatchChange"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!GenericTransactionPolicy#tryResolveChange:member(1)",
              "docComment": "/**\n * Given a change, attempts to derive an equivalent change which can be applied to the current state even if the given change was issued over a different state. This can be used to apply a sequence of changes that were issued concurrently, i.e., without knowledge of each other.\n *\n * @param state - The current state on which the returned change will be applied.\n *\n * @param change - The original change issued.\n *\n * @param path - The reconciliation path for the change.\n *\n * @returns The change to be applied to the current state, or a failure if the change cannot be resolved.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryResolveChange(state: "
                },
                {
                  "kind": "Reference",
                  "text": "SucceedingTransactionState",
                  "canonicalReference": "@fluid-experimental/tree!SucceedingTransactionState:interface"
                },
                {
                  "kind": "Content",
                  "text": ", change: "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": ", path: "
                },
                {
                  "kind": "Reference",
                  "text": "ReconciliationPath",
                  "canonicalReference": "@fluid-experimental/tree!ReconciliationPath:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Result",
                  "canonicalReference": "@fluid-experimental/tree!Result:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionFailure",
                  "canonicalReference": "@fluid-experimental/tree!TransactionFailure:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "state",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "change",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "path",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "tryResolveChange"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!GenericTransactionPolicy#validateOnClose:member(1)",
              "docComment": "/**\n * Additional transaction validation when the transaction is closed.\n *\n * @param state - The current state of the transaction.\n *\n * @returns The new state reflecting the closed transaction, or a failure if the transaction cannot be closed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "validateOnClose(state: "
                },
                {
                  "kind": "Reference",
                  "text": "SucceedingTransactionState",
                  "canonicalReference": "@fluid-experimental/tree!SucceedingTransactionState:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeResult",
                  "canonicalReference": "@fluid-experimental/tree!ChangeResult:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "state",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "validateOnClose"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluid-experimental/tree!getSerializedUploadedEditChunkContents:function(1)",
          "docComment": "/**\n * Returns a serialized description of blob paths and their associated contents for all uploaded edit chunks in the given edit log.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getSerializedUploadedEditChunkContents(sharedTree: "
            },
            {
              "kind": "Reference",
              "text": "SharedTree",
              "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<string>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "sharedTree",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "getSerializedUploadedEditChunkContents"
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluid-experimental/tree!getTraitLocationOfRange:function(1)",
          "docComment": "/**\n * Return the trait under which the given range resides\n *\n * @param view - the {@link TreeView} within which to retrieve the trait location\n *\n * @param range - must be well formed and valid\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function getTraitLocationOfRange(view: "
            },
            {
              "kind": "Reference",
              "text": "TreeView",
              "canonicalReference": "@fluid-experimental/tree!TreeView:class"
            },
            {
              "kind": "Content",
              "text": ", range: "
            },
            {
              "kind": "Reference",
              "text": "StableRange",
              "canonicalReference": "@fluid-experimental/tree!StableRange:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TraitLocation",
              "canonicalReference": "@fluid-experimental/tree!TraitLocation:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "view",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "range",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "getTraitLocationOfRange"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!HasTraits:interface",
          "docComment": "/**\n * An object which may have traits with children of the given type underneath it\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HasTraits<TChild> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TChild",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "HasTraits",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!HasTraits#traits:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly traits: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitMap",
                  "canonicalReference": "@fluid-experimental/tree!TraitMap:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TChild>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "traits",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!HasVariadicTraits:interface",
          "docComment": "/**\n * An object which may have traits with children of the given type underneath it\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HasVariadicTraits<TChild> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TChild",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "HasVariadicTraits",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!HasVariadicTraits#traits:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly traits?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly [key: string]: TChild | "
                },
                {
                  "kind": "Reference",
                  "text": "TreeNodeSequence",
                  "canonicalReference": "@fluid-experimental/tree!TreeNodeSequence:type"
                },
                {
                  "kind": "Content",
                  "text": "<TChild> | undefined;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "traits",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!ICheckoutEvents:interface",
          "docComment": "/**\n * Events which may be emitted by `Checkout`. See {@link CheckoutEvent} for documentation of event semantics.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ICheckoutEvents extends "
            },
            {
              "kind": "Reference",
              "text": "IErrorEvent",
              "canonicalReference": "@fluidframework/common-definitions!IErrorEvent:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ICheckoutEvents",
          "members": [
            {
              "kind": "CallSignature",
              "canonicalReference": "@fluid-experimental/tree!ICheckoutEvents:call(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Content",
                  "text": "'viewChange'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(before: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": ", after: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ]
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluid-experimental/tree!initialTree:var",
          "docComment": "/**\n * The initial tree.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "initialTree: "
            },
            {
              "kind": "Reference",
              "text": "ChangeNode_0_0_2",
              "canonicalReference": "@fluid-experimental/tree!ChangeNode_0_0_2:type"
            }
          ],
          "releaseTag": "Public",
          "name": "initialTree",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!Insert:interface",
          "docComment": "/**\n * Inserts a sequence of nodes at the specified destination. The source can be constructed either by a Build (used to insert new nodes) or a Detach (amounts to a \"move\" operation).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Insert "
            }
          ],
          "releaseTag": "Public",
          "name": "Insert",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Insert#destination:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly destination: "
                },
                {
                  "kind": "Reference",
                  "text": "StablePlace",
                  "canonicalReference": "@fluid-experimental/tree!StablePlace:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "destination",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Insert#source:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly source: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "source",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!Insert#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeType.Insert",
                  "canonicalReference": "@fluid-experimental/tree!ChangeType.Insert:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!InsertInternal_0_0_2:interface",
          "docComment": "/**\n * Inserts a sequence of nodes at the specified destination. The source can be constructed either by a Build (used to insert new nodes) or a Detach (amounts to a \"move\" operation).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InsertInternal_0_0_2 "
            }
          ],
          "releaseTag": "Public",
          "name": "InsertInternal_0_0_2",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!InsertInternal_0_0_2#destination:member",
              "docComment": "/**\n * {@inheritdoc (Insert:interface).destination}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly destination: "
                },
                {
                  "kind": "Reference",
                  "text": "StablePlaceInternal_0_0_2",
                  "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal_0_0_2:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "destination",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!InsertInternal_0_0_2#source:member",
              "docComment": "/**\n * {@inheritdoc (Insert:interface).source}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly source: "
                },
                {
                  "kind": "Reference",
                  "text": "DetachedSequenceId",
                  "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "source",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!InsertInternal_0_0_2#type:member",
              "docComment": "/**\n * {@inheritdoc (Insert:interface).\"type\"}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeTypeInternal.Insert",
                  "canonicalReference": "@fluid-experimental/tree!ChangeTypeInternal.Insert:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!InsertInternal:interface",
          "docComment": "/**\n * Inserts a sequence of nodes at the specified destination. The source can be constructed either by a Build (used to insert new nodes) or a Detach (amounts to a \"move\" operation).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InsertInternal extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "InsertInternal_0_0_2",
              "canonicalReference": "@fluid-experimental/tree!InsertInternal_0_0_2:interface"
            },
            {
              "kind": "Content",
              "text": ", 'destination'> "
            }
          ],
          "releaseTag": "Public",
          "name": "InsertInternal",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!InsertInternal#destination:member",
              "docComment": "/**\n * {@inheritdoc (Insert:interface).destination}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly destination: "
                },
                {
                  "kind": "Reference",
                  "text": "StablePlaceInternal",
                  "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "destination",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!InternalizedChange:interface",
          "docComment": "/**\n * This type should be used as an opaque handle in the public API for `ChangeInternal` objects. This is useful for supporting public APIs which involve working with a tree's edit history, which will involve changes that have already been internalized.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InternalizedChange "
            }
          ],
          "releaseTag": "Public",
          "name": "InternalizedChange",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!InternalizedChange#InternalChangeBrand:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "InternalChangeBrand: "
                },
                {
                  "kind": "Content",
                  "text": "'2cae1045-61cf-4ef7-a6a3-8ad920cb7ab3'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "InternalChangeBrand",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!InternedStringId:type",
          "docComment": "/**\n * The ID of the string that has been interned, which can be used by a {@link StringInterner} to retrieve the original string.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type InternedStringId = "
            },
            {
              "kind": "Content",
              "text": "number & {\n    readonly InternedStringId: 'e221abc9-9d17-4493-8db0-70c871a1c27c';\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "InternedStringId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!ISharedTreeEvents:interface",
          "docComment": "/**\n * Events which may be emitted by `SharedTree`. See {@link SharedTreeEvent} for documentation of event semantics.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISharedTreeEvents extends "
            },
            {
              "kind": "Reference",
              "text": "ISharedObjectEvents",
              "canonicalReference": "@fluidframework/shared-object-base!ISharedObjectEvents:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ISharedTreeEvents",
          "members": [
            {
              "kind": "CallSignature",
              "canonicalReference": "@fluid-experimental/tree!ISharedTreeEvents:call(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Content",
                  "text": "'committedEdit'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "EditCommittedHandler",
                  "canonicalReference": "@fluid-experimental/tree!EditCommittedHandler:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "CallSignature",
              "canonicalReference": "@fluid-experimental/tree!ISharedTreeEvents:call(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Content",
                  "text": "'appliedSequencedEdit'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Reference",
                  "text": "SequencedEditAppliedHandler",
                  "canonicalReference": "@fluid-experimental/tree!SequencedEditAppliedHandler:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluid-experimental/tree!isSharedTreeEvent:function(1)",
          "docComment": "/**\n * Returns if the supplied event is a SharedTree telemetry event.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function isSharedTreeEvent(event: "
            },
            {
              "kind": "Reference",
              "text": "ITelemetryBaseEvent",
              "canonicalReference": "@fluidframework/common-definitions!ITelemetryBaseEvent:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "boolean"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "event",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "isSharedTreeEvent"
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-experimental/tree!LazyCheckout:class",
          "docComment": "/**\n * Checkout that only updates its view of the tree when explicitly requested. This means that the {@link Checkout.currentView} field will never change unless {@link LazyCheckout.waitForPendingUpdates} is called.\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class LazyCheckout extends "
            },
            {
              "kind": "Reference",
              "text": "Checkout",
              "canonicalReference": "@fluid-experimental/tree!Checkout:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "LazyCheckout",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluid-experimental/tree!LazyCheckout:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `LazyCheckout` class\n *\n * @param tree - the tree\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(tree: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tree",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!LazyCheckout#handleNewEdit:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected handleNewEdit(id: "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": ", result: "
                },
                {
                  "kind": "Reference",
                  "text": "ValidEditingResult",
                  "canonicalReference": "@fluid-experimental/tree!ValidEditingResult:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "handleNewEdit"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!LazyCheckout#latestCommittedView:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected get latestCommittedView(): "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "latestCommittedView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!LazyCheckout#waitForEditsToSubmit:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForEditsToSubmit(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "waitForEditsToSubmit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!LazyCheckout#waitForPendingUpdates:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "waitForPendingUpdates(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "waitForPendingUpdates"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!LocalCompressedId:type",
          "docComment": "/**\n * A compressed ID that is local to a session (can only be decompressed when paired with a SessionId). It should not be persisted outside of the history as it can only be decompressed in the context of the originating session. If external persistence is needed (e.g. by a client), a StableId should be used instead.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type LocalCompressedId = "
            },
            {
              "kind": "Content",
              "text": "number & {\n    readonly LocalCompressedId: '6fccb42f-e2a4-4243-bd29-f13d12b9c6d1';\n} & "
            },
            {
              "kind": "Reference",
              "text": "SessionUnique",
              "canonicalReference": "@fluid-experimental/tree!SessionUnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "LocalCompressedId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!LogViewer:interface",
          "docComment": "/**\n * Creates `RevisionView`s for the revisions in an `EditLog`\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface LogViewer "
            }
          ],
          "releaseTag": "Public",
          "name": "LogViewer",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!LogViewer#getRevisionView:member(1)",
              "docComment": "/**\n * Returns the `TreeView` output associated with the largest revision in `editLog` less than (but not equal to) the supplied revision.\n *\n * For example: - revision 0 returns the initialRevision. - revision 1 returns the output of editLog[0] (or initialRevision if there is no edit 0). - revision Number.POSITIVE_INFINITY returns the newest revision.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRevisionView(revision: "
                },
                {
                  "kind": "Reference",
                  "text": "Revision",
                  "canonicalReference": "@fluid-experimental/tree!Revision:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "revision",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getRevisionView"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!LogViewer#getRevisionViewInSession:member(1)",
              "docComment": "/**\n * Returns the `TreeView` output associated with the largest revision in `editLog` less than (but not equal to) the supplied revision. Can only be used to retrieve revisions added during the current sessions.\n *\n * For example: - revision 0 returns the initialRevision. - revision 1 returns the output of editLog[0] (or initialRevision if there is no edit 0). - revision Number.POSITIVE_INFINITY returns the newest revision.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRevisionViewInSession(revision: "
                },
                {
                  "kind": "Reference",
                  "text": "Revision",
                  "canonicalReference": "@fluid-experimental/tree!Revision:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "revision",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getRevisionViewInSession"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!MergeHealthStats:interface",
          "docComment": "/**\n * Statistics about the health of collaborative edit merging when using {@link SharedTree}. All of those numbers constitute a tally since the last heartbeat was logged or cleared.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface MergeHealthStats "
            }
          ],
          "releaseTag": "Public",
          "name": "MergeHealthStats",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#badPlaceCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a bad place. Such cases are also counted under {@link MergeHealthStats.failedEditCount}.\n *\n * If this number is greater than the sum of: * {@link MergeHealthStats.deletedAncestorBadPlaceCount} * {@link MergeHealthStats.deletedSiblingBadPlaceCount}\n *\n * then some failure scenarios are not being tracked adequately.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "badPlaceCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "badPlaceCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#badRangeCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a bad range. Such cases are also counted under {@link MergeHealthStats.failedEditCount}.\n *\n * If this number is greater than the sum of: * {@link MergeHealthStats.deletedAncestorBadRangeCount} * {@link MergeHealthStats.deletedSiblingBadRangeCount} * {@link MergeHealthStats.updatedRangeInvertedCount} * {@link MergeHealthStats.updatedRangeHasPlacesInDifferentTraitsCount} * {@link MergeHealthStats.updatedRangeBadPlaceCount} * {@link MergeHealthStats.updatedRangeNeverValidPlaceCount}\n *\n * then some failure scenarios are not being tracked adequately.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "badRangeCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "badRangeCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#constraintViolationCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a constraint violation. Such cases are also counted under {@link MergeHealthStats.failedEditCount}.\n *\n * If this number is greater than the sum of: * {@link MergeHealthStats.rangeConstraintViolationCount} * {@link MergeHealthStats.lengthConstraintViolationCount} * {@link MergeHealthStats.parentConstraintViolationCount} * {@link MergeHealthStats.labelConstraintViolationCount}\n *\n * then some failure scenarios are not being tracked adequately.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constraintViolationCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "constraintViolationCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#deletedAncestorBadPlaceCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a place whose ancestors had been concurrently deleted. Such cases are also counted under {@link MergeHealthStats.badPlaceCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deletedAncestorBadPlaceCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deletedAncestorBadPlaceCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#deletedAncestorBadRangeCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a range whose ancestors had been concurrently deleted. Such cases are also counted under {@link MergeHealthStats.badRangeCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deletedAncestorBadRangeCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deletedAncestorBadRangeCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#deletedSiblingBadPlaceCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a place whose sibling (but not its parent) had been concurrently deleted. Such cases are also counted under {@link MergeHealthStats.badPlaceCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deletedSiblingBadPlaceCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deletedSiblingBadPlaceCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#deletedSiblingBadRangeCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a range whose delimiting sibling(s) (but not its parent) had been concurrently deleted. Such cases are also counted under {@link MergeHealthStats.badRangeCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deletedSiblingBadRangeCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "deletedSiblingBadRangeCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#editCount:member",
              "docComment": "/**\n * Number of sequenced edits applied (failed or not).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "editCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "editCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#failedEditCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply. Such cases are also counted under {@link MergeHealthStats.editCount}.\n *\n * If this number is greater than the sum of: * {@link MergeHealthStats.badPlaceCount} * {@link MergeHealthStats.badRangeCount} * {@link MergeHealthStats.constraintViolationCount} * {@link MergeHealthStats.idAlreadyInUseCount} * {@link MergeHealthStats.unknownIdCount} * {@link MergeHealthStats.malformedEditCount}\n *\n * then some failure scenarios are not being tracked adequately.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "failedEditCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "failedEditCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#idAlreadyInUseCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to an ID collision. Such cases are also counted under {@link MergeHealthStats.failedEditCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "idAlreadyInUseCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "idAlreadyInUseCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#labelConstraintViolationCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a constrained range being under a different label. Such cases are also counted under {@link MergeHealthStats.constraintViolationCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "labelConstraintViolationCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "labelConstraintViolationCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#lengthConstraintViolationCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a constrained range having a different length. Such cases are also counted under {@link MergeHealthStats.constraintViolationCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "lengthConstraintViolationCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "lengthConstraintViolationCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#malformedEditCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to an edit becoming malformed. This should theoretically never happen. Such cases are also counted under {@link MergeHealthStats.failedEditCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "malformedEditCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "malformedEditCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#maxAttemptCount:member",
              "docComment": "/**\n * The highest number previous attempts on a sequenced edit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "maxAttemptCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "maxAttemptCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#parentConstraintViolationCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a constrained range being under a different parent. Such cases are also counted under {@link MergeHealthStats.constraintViolationCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "parentConstraintViolationCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "parentConstraintViolationCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#pathLengths:member",
              "docComment": "/**\n * The counts of occurrences for a given path length. `pathLengths[1] === 2` means two occurrences of length one.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "pathLengths: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "pathLengths",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#rangeConstraintViolationCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a constrained range becoming invalid or malformed. Such cases are also counted under {@link MergeHealthStats.constraintViolationCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rangeConstraintViolationCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "rangeConstraintViolationCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#unknownIdCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to an ID being unknown. Such cases are also counted under {@link MergeHealthStats.failedEditCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unknownIdCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "unknownIdCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#updatedRangeBadPlaceCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a range whose places were resolvable but bad. This should not happen because place resolution is expected to either return a valid place or fail. Such cases are also counted under {@link MergeHealthStats.badRangeCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updatedRangeBadPlaceCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "updatedRangeBadPlaceCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#updatedRangeHasPlacesInDifferentTraitsCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a range whose places were resolvable but in different traits. Such cases are also counted under {@link MergeHealthStats.badRangeCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updatedRangeHasPlacesInDifferentTraitsCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "updatedRangeHasPlacesInDifferentTraitsCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#updatedRangeInvertedCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a range whose places were resolvable but inverted (i.e., end before start). Such cases are also counted under {@link MergeHealthStats.badRangeCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updatedRangeInvertedCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "updatedRangeInvertedCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!MergeHealthStats#updatedRangeNeverValidPlaceCount:member",
              "docComment": "/**\n * Number of sequenced edits that failed to apply due to a range whose places were not resolvable due to not being valid for any state. Such cases are also counted under {@link MergeHealthStats.badRangeCount}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "updatedRangeNeverValidPlaceCount: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "updatedRangeNeverValidPlaceCount",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!NodeData:interface",
          "docComment": "/**\n * The fields required by a node in a tree\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NodeData<TId> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TId",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "NodeData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!NodeData#definition:member",
              "docComment": "/**\n * The meaning of this node. Provides contexts/semantics for this node and its content. Typically use to associate a node with metadata (including a schema) and source code (types, behaviors, etc).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly definition: "
                },
                {
                  "kind": "Reference",
                  "text": "Definition",
                  "canonicalReference": "@fluid-experimental/tree!Definition:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "definition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!NodeData#identifier:member",
              "docComment": "/**\n * Identifier which can be used to refer to this Node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly identifier: "
                },
                {
                  "kind": "Content",
                  "text": "TId"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "identifier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!NodeData#payload:member",
              "docComment": "/**\n * A payload of arbitrary serializable data\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly payload?: "
                },
                {
                  "kind": "Reference",
                  "text": "Payload",
                  "canonicalReference": "@fluid-experimental/tree!Payload:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "payload",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!NodeId:type",
          "docComment": "/**\n * Node identifier. Identifies a node within a document.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type NodeId = "
            },
            {
              "kind": "Content",
              "text": "number & "
            },
            {
              "kind": "Reference",
              "text": "SessionSpaceCompressedId",
              "canonicalReference": "@fluid-experimental/tree!SessionSpaceCompressedId:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "NodeIdBrand",
              "canonicalReference": "@fluid-experimental/tree!NodeIdBrand:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "NodeId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!NodeIdBrand:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NodeIdBrand "
            }
          ],
          "releaseTag": "Public",
          "name": "NodeIdBrand",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!NodeIdBrand#NodeId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly NodeId: "
                },
                {
                  "kind": "Content",
                  "text": "'e53e7d6b-c8b9-431a-8805-4843fc639342'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "NodeId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!NodeIdContext:interface",
          "docComment": "/**\n * An object which can generate node IDs and convert node IDs between compressed and stable variants\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NodeIdContext extends "
            },
            {
              "kind": "Reference",
              "text": "NodeIdGenerator",
              "canonicalReference": "@fluid-experimental/tree!NodeIdGenerator:interface"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "NodeIdConverter",
              "canonicalReference": "@fluid-experimental/tree!NodeIdConverter:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "NodeIdContext",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            },
            {
              "startIndex": 3,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!NodeIdConverter:interface",
          "docComment": "/**\n * An object which can convert node IDs between compressed and stable variants\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NodeIdConverter "
            }
          ],
          "releaseTag": "Public",
          "name": "NodeIdConverter",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!NodeIdConverter#convertToNodeId:member(1)",
              "docComment": "/**\n * Given a stable ID, return the corresponding NodeId or throws if the supplied stable ID was never generated with this tree, either as a UUID corresponding to a `NodeId` or as an override passed to `generateNodeId`. If a stable ID is returned, this does not imply that there is a node with `id` in the current revision of the tree, only that `id` was at some point generated by an instance of this SharedTree.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "convertToNodeId(id: "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "convertToNodeId"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!NodeIdConverter#convertToStableNodeId:member(1)",
              "docComment": "/**\n * Given a NodeId, returns the corresponding stable ID or throws if the supplied node ID was not generated with this tree (`NodeId`s may not be used across SharedTree instances, see `generateNodeId` for more). The returned value will be a UUID, unless the creation of `id` used an override string (see `generateNodeId` for more). The result is safe to persist and re-use across `SharedTree` instances, unlike `NodeId`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "convertToStableNodeId(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "convertToStableNodeId"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!NodeIdConverter#tryConvertToNodeId:member(1)",
              "docComment": "/**\n * Given a stable ID, return the corresponding NodeId or return undefined if the supplied stable ID was never generated with this tree, either as a UUID corresponding to a `NodeId` or as an override passed to `generateNodeId`. If a stable ID is returned, this does not imply that there is a node with `id` in the current revision of the tree, only that `id` was at some point generated by an instance of this SharedTree.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryConvertToNodeId(id: "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "tryConvertToNodeId"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!NodeIdConverter#tryConvertToStableNodeId:member(1)",
              "docComment": "/**\n * Given a NodeId, attempt to return the corresponding stable ID. The returned value will be a UUID, unless the creation of `id` used an override string (see `generateNodeId` for more). The returned stable ID is undefined if `id` was never created with this SharedTree. If a stable ID is returned, this does not imply that there is a node with `id` in the current revision of the tree, only that `id` was at some point generated by some instance of this tree.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryConvertToStableNodeId(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "tryConvertToStableNodeId"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!NodeIdGenerator:interface",
          "docComment": "/**\n * An object which can generate node IDs\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NodeIdGenerator "
            }
          ],
          "releaseTag": "Public",
          "name": "NodeIdGenerator",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!NodeIdGenerator#generateNodeId:member(1)",
              "docComment": "/**\n * Generates a node identifier. The returned IDs may be used as the identifier of a node in the SharedTree. `NodeId`s are *always* unique and stable within the scope of the tree and session that generated them. They are *not* unique within a Fluid container, and *cannot* be compared across instances of a SharedTree. They are *not* stable across sessions/lifetimes of a SharedTree, and *cannot* be persisted (e.g. stored in payloads, uploaded in blobs, etc.). If stable persistence is needed, NodeIdConverter.convertToStableNodeId may be used to return a corresponding UUID that is globally unique and stable.\n *\n * @param override - if supplied, calls to `convertToStableNodeId` using the returned node ID will return the override instead of the UUID. Calls to `generateNodeId` with the same override always return the same ID. Performance note: passing an override string incurs a storage cost that is significantly higher that a node ID without one, and should be avoided if possible.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "generateNodeId(override?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "override",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "generateNodeId"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!NodeInTrait:interface",
          "docComment": "/**\n * Contains some redundant information. Use only in computations between edits. Do not store.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface NodeInTrait "
            }
          ],
          "releaseTag": "Public",
          "name": "NodeInTrait",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!NodeInTrait#index:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly index: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitNodeIndex",
                  "canonicalReference": "@fluid-experimental/tree!TraitNodeIndex:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "index",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!NodeInTrait#trait:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly trait: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLocation",
                  "canonicalReference": "@fluid-experimental/tree!TraitLocation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "trait",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!OrderedEditSet:interface",
          "docComment": "/**\n * An ordered set of Edits associated with a SharedTree. Supports fast lookup of edits by ID and enforces idempotence. Edits are virtualized, however, edits added during the current session are guaranteed to be available synchronously.\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface OrderedEditSet<TChange = "
            },
            {
              "kind": "Content",
              "text": "unknown"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TChange",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "OrderedEditSet",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!OrderedEditSet#editIds:member",
              "docComment": "/**\n * The edit IDs of all edits in the log.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly editIds: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "editIds",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!OrderedEditSet#getEditAtIndex:member(1)",
              "docComment": "/**\n * @returns the edit at the given index within this `OrderedEditSet`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEditAtIndex(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Edit",
                  "canonicalReference": "@fluid-experimental/tree!Edit:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TChange>>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getEditAtIndex"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!OrderedEditSet#getEditInSessionAtIndex:member(1)",
              "docComment": "/**\n * @returns the edit at the given index. Must have been added to the log during the current session.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEditInSessionAtIndex(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Edit",
                  "canonicalReference": "@fluid-experimental/tree!Edit:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TChange>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getEditInSessionAtIndex"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!OrderedEditSet#getIdAtIndex:member(1)",
              "docComment": "/**\n * @returns the id of the edit at the given index within this 'OrderedEditSet'.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getIdAtIndex(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getIdAtIndex"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!OrderedEditSet#getIndexOfId:member(1)",
              "docComment": "/**\n * @returns the index of the edit with the given editId within this `OrderedEditSet`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getIndexOfId(editId: "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "editId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getIndexOfId"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!OrderedEditSet#length:member",
              "docComment": "/**\n * The length of this `OrderedEditSet`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly length: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "length",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!OrderedEditSet#tryGetEdit:member(1)",
              "docComment": "/**\n * @returns the Edit associated with the EditId or undefined if there is no such edit in the set.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryGetEdit(editId: "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Edit",
                  "canonicalReference": "@fluid-experimental/tree!Edit:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TChange> | undefined>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "editId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "tryGetEdit"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!OrderedEditSet#tryGetIndexOfId:member(1)",
              "docComment": "/**\n * @returns the index of the edit with the given editId within this `OrderedEditSet`, or `undefined` if no such edit exists.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryGetIndexOfId(editId: "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "editId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "tryGetIndexOfId"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!ParentData:interface",
          "docComment": "/**\n * Information about a ForestNode's parent\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ParentData "
            }
          ],
          "releaseTag": "Public",
          "name": "ParentData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ParentData#parentId:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly parentId: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "parentId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ParentData#traitParent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly traitParent: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLabel",
                  "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "traitParent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!Payload:type",
          "docComment": "/**\n * Json compatible representation of a payload storing arbitrary Serializable data.\n *\n * Keys starting with \"IFluid\" are reserved for special use such as the JavaScript feature detection pattern and should not be used.\n *\n * See {@link comparePayloads} for equality semantics and related details (like what is allowed to be lost when serializing)\n *\n * TODO:#51984: Allow opting into heuristic blobbing in snapshots with a special IFluid key.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Payload = "
            },
            {
              "kind": "Reference",
              "text": "Serializable",
              "canonicalReference": "@fluidframework/datastore-definitions!Serializable:type"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Payload",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluid-experimental/tree!placeFromStablePlace:function(1)",
          "docComment": "/**\n * Express the given {@link (StablePlace:interface)} as a {@link TreeViewPlace}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function placeFromStablePlace(view: "
            },
            {
              "kind": "Reference",
              "text": "TreeView",
              "canonicalReference": "@fluid-experimental/tree!TreeView:class"
            },
            {
              "kind": "Content",
              "text": ", stablePlace: "
            },
            {
              "kind": "Reference",
              "text": "StablePlace",
              "canonicalReference": "@fluid-experimental/tree!StablePlace:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TreeViewPlace",
              "canonicalReference": "@fluid-experimental/tree!TreeViewPlace:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "view",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "stablePlace",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "placeFromStablePlace"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!PlaceholderTree:type",
          "docComment": "/**\n * A tree whose nodes are either TreeNodes or a placeholder\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PlaceholderTree<TPlaceholder = "
            },
            {
              "kind": "Content",
              "text": "never"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "TreeNode",
              "canonicalReference": "@fluid-experimental/tree!TreeNode:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "PlaceholderTree",
              "canonicalReference": "@fluid-experimental/tree!PlaceholderTree:type"
            },
            {
              "kind": "Content",
              "text": "<TPlaceholder>, "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": "> | TPlaceholder"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PlaceholderTree",
          "typeParameters": [
            {
              "typeParameterName": "TPlaceholder",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!PlaceIndex:type",
          "docComment": "/**\n * Index of a place within a trait. 0 = before all nodes, 1 = after first node, etc.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type PlaceIndex = "
            },
            {
              "kind": "Content",
              "text": "number & {\n    readonly PlaceIndex: unique symbol;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "PlaceIndex",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluid-experimental/tree!PlaceValidationResult:enum",
          "docComment": "/**\n * The result of validating a place.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum PlaceValidationResult "
            }
          ],
          "releaseTag": "Public",
          "name": "PlaceValidationResult",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!PlaceValidationResult.Malformed:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Malformed = "
                },
                {
                  "kind": "Content",
                  "text": "\"Malformed\""
                }
              ],
              "releaseTag": "Public",
              "name": "Malformed",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!PlaceValidationResult.MissingParent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MissingParent = "
                },
                {
                  "kind": "Content",
                  "text": "\"MissingParent\""
                }
              ],
              "releaseTag": "Public",
              "name": "MissingParent",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!PlaceValidationResult.MissingSibling:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "MissingSibling = "
                },
                {
                  "kind": "Content",
                  "text": "\"MissingSibling\""
                }
              ],
              "releaseTag": "Public",
              "name": "MissingSibling",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!PlaceValidationResult.SiblingIsRootOrDetached:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SiblingIsRootOrDetached = "
                },
                {
                  "kind": "Content",
                  "text": "\"SiblingIsRootOrDetached\""
                }
              ],
              "releaseTag": "Public",
              "name": "SiblingIsRootOrDetached",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!PlaceValidationResult.Valid:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Valid = "
                },
                {
                  "kind": "Content",
                  "text": "\"Valid\""
                }
              ],
              "releaseTag": "Public",
              "name": "Valid",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluid-experimental/tree!rangeFromStableRange:function(1)",
          "docComment": "/**\n * Express the given {@link (StableRange:interface)} as a {@link TreeViewRange}\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function rangeFromStableRange(view: "
            },
            {
              "kind": "Reference",
              "text": "TreeView",
              "canonicalReference": "@fluid-experimental/tree!TreeView:class"
            },
            {
              "kind": "Content",
              "text": ", range: "
            },
            {
              "kind": "Reference",
              "text": "StableRange",
              "canonicalReference": "@fluid-experimental/tree!StableRange:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "TreeViewRange",
              "canonicalReference": "@fluid-experimental/tree!TreeViewRange:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 6
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "view",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "range",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isOptional": false
            }
          ],
          "name": "rangeFromStableRange"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!RangeValidationResult:type",
          "docComment": "/**\n * The result of validating a range.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type RangeValidationResult = "
            },
            {
              "kind": "Reference",
              "text": "RangeValidationResultKind.Valid",
              "canonicalReference": "@fluid-experimental/tree!RangeValidationResultKind.Valid:member"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RangeValidationResultKind.PlacesInDifferentTraits",
              "canonicalReference": "@fluid-experimental/tree!RangeValidationResultKind.PlacesInDifferentTraits:member"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "RangeValidationResultKind.Inverted",
              "canonicalReference": "@fluid-experimental/tree!RangeValidationResultKind.Inverted:member"
            },
            {
              "kind": "Content",
              "text": " | {\n    kind: "
            },
            {
              "kind": "Reference",
              "text": "RangeValidationResultKind.BadPlace",
              "canonicalReference": "@fluid-experimental/tree!RangeValidationResultKind.BadPlace:member"
            },
            {
              "kind": "Content",
              "text": ";\n    place: "
            },
            {
              "kind": "Reference",
              "text": "StablePlaceInternal",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    placeFailure: "
            },
            {
              "kind": "Reference",
              "text": "BadPlaceValidationResult",
              "canonicalReference": "@fluid-experimental/tree!BadPlaceValidationResult:type"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "RangeValidationResult",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 13
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluid-experimental/tree!RangeValidationResultKind:enum",
          "docComment": "/**\n * The kinds of result of validating a range.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum RangeValidationResultKind "
            }
          ],
          "releaseTag": "Public",
          "name": "RangeValidationResultKind",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!RangeValidationResultKind.BadPlace:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "BadPlace = "
                },
                {
                  "kind": "Content",
                  "text": "\"BadPlace\""
                }
              ],
              "releaseTag": "Public",
              "name": "BadPlace",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!RangeValidationResultKind.Inverted:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Inverted = "
                },
                {
                  "kind": "Content",
                  "text": "\"Inverted\""
                }
              ],
              "releaseTag": "Public",
              "name": "Inverted",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!RangeValidationResultKind.PlacesInDifferentTraits:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "PlacesInDifferentTraits = "
                },
                {
                  "kind": "Content",
                  "text": "\"PlacesInDifferentTraits\""
                }
              ],
              "releaseTag": "Public",
              "name": "PlacesInDifferentTraits",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!RangeValidationResultKind.Valid:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Valid = "
                },
                {
                  "kind": "Content",
                  "text": "\"Valid\""
                }
              ],
              "releaseTag": "Public",
              "name": "Valid",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!ReconciliationChange:interface",
          "docComment": "/**\n * A change in the `ReconciliationPath`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ReconciliationChange "
            }
          ],
          "releaseTag": "Public",
          "name": "ReconciliationChange",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ReconciliationChange#after:member",
              "docComment": "/**\n * The resulting view from applying the resolved change.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly after: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionView",
                  "canonicalReference": "@fluid-experimental/tree!TransactionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "after",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ReconciliationChange#resolvedChange:member",
              "docComment": "/**\n * The resolved change that was applied during the edit. Resolved changes are guaranteed to be expressed with valid tree locations instead of anchors that need resolution.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly resolvedChange: "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "resolvedChange",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!ReconciliationEdit:interface",
          "docComment": "/**\n * An edit in the `ReconciliationPath`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ReconciliationEdit "
            }
          ],
          "releaseTag": "Public",
          "name": "ReconciliationEdit",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@fluid-experimental/tree!ReconciliationEdit:index(1)",
              "docComment": "/**\n * Allows access to change information.\n *\n * @returns Reconciliation information for the change at the given `index`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly [index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "ReconciliationChange",
                  "canonicalReference": "@fluid-experimental/tree!ReconciliationChange:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ReconciliationEdit#after:member",
              "docComment": "/**\n * The state after the edit was applied.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly after: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "after",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ReconciliationEdit#before:member",
              "docComment": "/**\n * The state before the edit was applied.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly before: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "before",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ReconciliationEdit#length:member",
              "docComment": "/**\n * The number of changes in the edit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly length: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "length",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!ReconciliationPath:interface",
          "docComment": "/**\n * The path of edits from the revision view where a change was meant to have been applied to the view where the edit that contains the change is actually applied. The path only contains edits that were successfully applied. This path is always empty for a change that has no concurrent edits.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ReconciliationPath "
            }
          ],
          "releaseTag": "Public",
          "name": "ReconciliationPath",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@fluid-experimental/tree!ReconciliationPath:index(1)",
              "docComment": "/**\n * Allows access to edit information.\n *\n * @returns Reconciliation information for the edit at the given `index`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly [index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "ReconciliationEdit",
                  "canonicalReference": "@fluid-experimental/tree!ReconciliationEdit:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ReconciliationPath#length:member",
              "docComment": "/**\n * The number of edits in the path.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly length: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "length",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@fluid-experimental/tree!Result:namespace",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace Result "
            }
          ],
          "releaseTag": "Public",
          "name": "Result",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "@fluid-experimental/tree!Result.error:function(1)",
              "docComment": "/**\n * Factory function for making a unsuccessful Result.\n *\n * @param error - The error to wrap in the Result.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function error<TError>(error: "
                },
                {
                  "kind": "Content",
                  "text": "TError"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "@fluid-experimental/tree!Result.Error:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TError>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TError",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "error"
            },
            {
              "kind": "Interface",
              "canonicalReference": "@fluid-experimental/tree!Result.Error:interface",
              "docComment": "/**\n * Wraps an error of type `TError`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Error<TError> "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "TError",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "Error",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!Result.Error#error:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly error: "
                    },
                    {
                      "kind": "Content",
                      "text": "TError"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "error",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!Result.Error#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ResultType.Error",
                      "canonicalReference": "@fluid-experimental/tree!Result.ResultType.Error:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Function",
              "canonicalReference": "@fluid-experimental/tree!Result.isError:function(1)",
              "docComment": "/**\n * Type guard for unsuccessful Result.\n *\n * @returns True if `result` is unsuccessful.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isError<TOk, TError>(result: "
                },
                {
                  "kind": "Reference",
                  "text": "Result",
                  "canonicalReference": "@fluid-experimental/tree!Result:type"
                },
                {
                  "kind": "Content",
                  "text": "<TOk, TError>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "result",
                  "canonicalReference": "@fluid-experimental/tree!~result"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "@fluid-experimental/tree!Result.Error:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TError>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TOk",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TError",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "isError"
            },
            {
              "kind": "Function",
              "canonicalReference": "@fluid-experimental/tree!Result.isOk:function(1)",
              "docComment": "/**\n * Type guard for successful Result.\n *\n * @returns True if `result` is successful.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function isOk<TOk, TError>(result: "
                },
                {
                  "kind": "Reference",
                  "text": "Result",
                  "canonicalReference": "@fluid-experimental/tree!Result:type"
                },
                {
                  "kind": "Content",
                  "text": "<TOk, TError>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "result",
                  "canonicalReference": "@fluid-experimental/tree!~result"
                },
                {
                  "kind": "Content",
                  "text": " is "
                },
                {
                  "kind": "Reference",
                  "text": "Ok",
                  "canonicalReference": "@fluid-experimental/tree!Result.Ok:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TOk>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TOk",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TError",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "isOk"
            },
            {
              "kind": "Function",
              "canonicalReference": "@fluid-experimental/tree!Result.mapError:function(1)",
              "docComment": "/**\n * Maps the given result with the given function when the result is an error.\n *\n * @param result - The result to map.\n *\n * @param map - The function to apply to derive the new error.\n *\n * @returns The given result if it is ok, the mapped result otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function mapError<TOk, TErrorIn, TErrorOut>(result: "
                },
                {
                  "kind": "Reference",
                  "text": "Result",
                  "canonicalReference": "@fluid-experimental/tree!Result:type"
                },
                {
                  "kind": "Content",
                  "text": "<TOk, TErrorIn>"
                },
                {
                  "kind": "Content",
                  "text": ", map: "
                },
                {
                  "kind": "Content",
                  "text": "(error: TErrorIn) => TErrorOut"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Result",
                  "canonicalReference": "@fluid-experimental/tree!Result:type"
                },
                {
                  "kind": "Content",
                  "text": "<TOk, TErrorOut>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "map",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TOk",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TErrorIn",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TErrorOut",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "mapError"
            },
            {
              "kind": "Function",
              "canonicalReference": "@fluid-experimental/tree!Result.mapOk:function(1)",
              "docComment": "/**\n * Maps the given result with the given function when the result is ok.\n *\n * @param result - The result to map.\n *\n * @param map - The function to apply to derive the new result.\n *\n * @returns The given result if it is not ok, the mapped result otherwise.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function mapOk<TOkIn, TOkOut, TError>(result: "
                },
                {
                  "kind": "Reference",
                  "text": "Result",
                  "canonicalReference": "@fluid-experimental/tree!Result:type"
                },
                {
                  "kind": "Content",
                  "text": "<TOkIn, TError>"
                },
                {
                  "kind": "Content",
                  "text": ", map: "
                },
                {
                  "kind": "Content",
                  "text": "(ok: TOkIn) => TOkOut"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Result",
                  "canonicalReference": "@fluid-experimental/tree!Result:type"
                },
                {
                  "kind": "Content",
                  "text": "<TOkOut, TError>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "map",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TOkIn",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TOkOut",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                },
                {
                  "typeParameterName": "TError",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "mapOk"
            },
            {
              "kind": "Function",
              "canonicalReference": "@fluid-experimental/tree!Result.ok:function(1)",
              "docComment": "/**\n * Factory function for making a successful Result.\n *\n * @param result - The result to wrap in the Result.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "function ok<TOk>(result: "
                },
                {
                  "kind": "Content",
                  "text": "TOk"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Ok",
                  "canonicalReference": "@fluid-experimental/tree!Result.Ok:interface"
                },
                {
                  "kind": "Content",
                  "text": "<TOk>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "result",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "TOk",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "ok"
            },
            {
              "kind": "Interface",
              "canonicalReference": "@fluid-experimental/tree!Result.Ok:interface",
              "docComment": "/**\n * Wraps a result of type `TOk`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "interface Ok<TOk> "
                }
              ],
              "releaseTag": "Public",
              "typeParameters": [
                {
                  "typeParameterName": "TOk",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "Ok",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!Result.Ok#result:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly result: "
                    },
                    {
                      "kind": "Content",
                      "text": "TOk"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "result",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!Result.Ok#type:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly type: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ResultType.Ok",
                      "canonicalReference": "@fluid-experimental/tree!Result.ResultType.Ok:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "type",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Enum",
              "canonicalReference": "@fluid-experimental/tree!Result.ResultType:enum",
              "docComment": "/**\n * Tag value use to differentiate the members of the `Result` discriminated union.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "enum ResultType "
                }
              ],
              "releaseTag": "Public",
              "name": "ResultType",
              "members": [
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!Result.ResultType.Error:member",
                  "docComment": "/**\n * Signals an unsuccessful result.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "Error = "
                    },
                    {
                      "kind": "Content",
                      "text": "1"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "Error",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!Result.ResultType.Ok:member",
                  "docComment": "/**\n * Signals a successful result.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "Ok = "
                    },
                    {
                      "kind": "Content",
                      "text": "0"
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "Ok",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!Result:type",
          "docComment": "/**\n * Discriminated union instance that wraps either a result of type `TOk` or an error of type `TError`.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Result<TOk, TError> = "
            },
            {
              "kind": "Reference",
              "text": "Result.Ok",
              "canonicalReference": "@fluid-experimental/tree!Result.Ok:interface"
            },
            {
              "kind": "Content",
              "text": "<TOk> | "
            },
            {
              "kind": "Reference",
              "text": "Result.Error",
              "canonicalReference": "@fluid-experimental/tree!Result.Error:interface"
            },
            {
              "kind": "Content",
              "text": "<TError>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Result",
          "typeParameters": [
            {
              "typeParameterName": "TOk",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TError",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!Revision:type",
          "docComment": "/**\n * A revision corresponds to an index in an `EditLog`.\n *\n * It is associated with the output `RevisionView` of applying the edit at the index to the previous revision. For example: - revision 0 corresponds to the initialRevision. - revision 1 corresponds to the output of editLog[0] applied to the initialRevision.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Revision = "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Revision",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-experimental/tree!RevisionView:class",
          "docComment": "/**\n * An immutable view of a distributed tree.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class RevisionView extends "
            },
            {
              "kind": "Reference",
              "text": "TreeView",
              "canonicalReference": "@fluid-experimental/tree!TreeView:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "RevisionView",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!RevisionView#equals:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(view: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "view",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!RevisionView.fromTree:member(1)",
              "docComment": "/**\n * Constructs a {@link RevisionView} using the supplied tree.\n *\n * @param root - the root of the tree to use as the contents of the {@link RevisionView}\n *\n * @param expensiveValidation - whether or not to perform additional validation, e.g. to catch errors when testing\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromTree<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "TreeNode",
                  "canonicalReference": "@fluid-experimental/tree!TreeNode:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T, "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ">(root: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", expensiveValidation?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 10,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "root",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "expensiveValidation",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  },
                  "isOptional": true
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "fromTree"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!RevisionView.fromTree:member(2)",
              "docComment": "/**\n * Constructs a {@link RevisionView} using the supplied tree.\n *\n * @param root - the root of the tree to use as the contents of the `RevisionView`\n *\n * @param idConverter - the {@link NodeIdConverter} that will recompress the IDs the in the tree\n *\n * @param expensiveValidation - whether or not to perform additional validation, e.g. to catch errors when testing\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromTree<T extends "
                },
                {
                  "kind": "Reference",
                  "text": "TreeNode",
                  "canonicalReference": "@fluid-experimental/tree!TreeNode:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T, "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ">(root: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", idConverter: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeIdConverter",
                  "canonicalReference": "@fluid-experimental/tree!NodeIdConverter:interface"
                },
                {
                  "kind": "Content",
                  "text": ", expensiveValidation?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "root",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "idConverter",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 9
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "expensiveValidation",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 11
                  },
                  "isOptional": true
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "fromTree"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!RevisionView#openForTransaction:member(1)",
              "docComment": "/**\n * Begin a transaction by generating a mutable `TransactionView` from this view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "openForTransaction(): "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionView",
                  "canonicalReference": "@fluid-experimental/tree!TransactionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "openForTransaction"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!SequencedEditAppliedEventArguments:interface",
          "docComment": "/**\n * The arguments included when the {@link SharedTreeEvent.SequencedEditApplied} SharedTreeEvent is emitted.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SequencedEditAppliedEventArguments "
            }
          ],
          "releaseTag": "Public",
          "name": "SequencedEditAppliedEventArguments",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SequencedEditAppliedEventArguments#edit:member",
              "docComment": "/**\n * The ID of the edit committed.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly edit: "
                },
                {
                  "kind": "Reference",
                  "text": "Edit",
                  "canonicalReference": "@fluid-experimental/tree!Edit:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "edit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SequencedEditAppliedEventArguments#logger:member",
              "docComment": "/**\n * The telemetry logger associated with sequenced edit application.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly logger: "
                },
                {
                  "kind": "Reference",
                  "text": "ITelemetryLogger",
                  "canonicalReference": "@fluidframework/common-definitions!ITelemetryLogger:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "logger",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SequencedEditAppliedEventArguments#outcome:member",
              "docComment": "/**\n * The outcome of the sequenced edit being applied.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly outcome: "
                },
                {
                  "kind": "Reference",
                  "text": "EditApplicationOutcome",
                  "canonicalReference": "@fluid-experimental/tree!EditApplicationOutcome:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "outcome",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SequencedEditAppliedEventArguments#reconciliationPath:member",
              "docComment": "/**\n * The reconciliation path for the edit. See {@link ReconciliationPath} for details.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly reconciliationPath: "
                },
                {
                  "kind": "Reference",
                  "text": "ReconciliationPath",
                  "canonicalReference": "@fluid-experimental/tree!ReconciliationPath:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "reconciliationPath",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SequencedEditAppliedEventArguments#tree:member",
              "docComment": "/**\n * The tree the edit was applied to.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tree: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tree",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SequencedEditAppliedEventArguments#wasLocal:member",
              "docComment": "/**\n * Whether or not this was a local edit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly wasLocal: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "wasLocal",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!SequencedEditAppliedHandler:type",
          "docComment": "/**\n * Expected type for a handler of the {@link SharedTreeEvent.SequencedEditApplied} event.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SequencedEditAppliedHandler = "
            },
            {
              "kind": "Content",
              "text": "(args: "
            },
            {
              "kind": "Reference",
              "text": "SequencedEditAppliedEventArguments",
              "canonicalReference": "@fluid-experimental/tree!SequencedEditAppliedEventArguments:interface"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SequencedEditAppliedHandler",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!SessionSpaceCompressedId:type",
          "docComment": "/**\n * A compressed ID that has been normalized into \"session space\" (see `IdCompressor` for more). Consumer-facing APIs and data structures should use session-space IDs as their lifetime and equality is stable and tied to the compressor that produced them.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SessionSpaceCompressedId = "
            },
            {
              "kind": "Reference",
              "text": "CompressedId",
              "canonicalReference": "@fluid-experimental/tree!CompressedId:type"
            },
            {
              "kind": "Content",
              "text": " & "
            },
            {
              "kind": "Reference",
              "text": "SessionUnique",
              "canonicalReference": "@fluid-experimental/tree!SessionUnique:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SessionSpaceCompressedId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!SessionUnique:interface",
          "docComment": "/**\n * A brand for identity types that are unique within a particular session (SharedTree instance).\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SessionUnique "
            }
          ],
          "releaseTag": "Public",
          "name": "SessionUnique",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SessionUnique#SessionUnique:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly SessionUnique: "
                },
                {
                  "kind": "Content",
                  "text": "'cea55054-6b82-4cbf-ad19-1fa645ea3b3e'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "SessionUnique",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluid-experimental/tree!setTrait:function(1)",
          "docComment": "/**\n * Create a sequence of changes that resets the contents of `trait`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setTrait(trait: "
            },
            {
              "kind": "Reference",
              "text": "TraitLocation",
              "canonicalReference": "@fluid-experimental/tree!TraitLocation:interface"
            },
            {
              "kind": "Content",
              "text": ", nodes: "
            },
            {
              "kind": "Reference",
              "text": "BuildNode",
              "canonicalReference": "@fluid-experimental/tree!BuildNode:type"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "TreeNodeSequence",
              "canonicalReference": "@fluid-experimental/tree!TreeNodeSequence:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "BuildNode",
              "canonicalReference": "@fluid-experimental/tree!BuildNode:type"
            },
            {
              "kind": "Content",
              "text": ">"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Change",
              "canonicalReference": "@fluid-experimental/tree!Change:type"
            },
            {
              "kind": "Content",
              "text": "[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 10,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "trait",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            },
            {
              "parameterName": "nodes",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 9
              },
              "isOptional": false
            }
          ],
          "name": "setTrait"
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!SetValue:interface",
          "docComment": "/**\n * Modifies the payload of a node.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SetValue "
            }
          ],
          "releaseTag": "Public",
          "name": "SetValue",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SetValue#nodeToModify:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly nodeToModify: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nodeToModify",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SetValue#payload:member",
              "docComment": "/**\n * Sets or clears the payload. To improve ease of forwards compatibility, an explicit `null` value is used to represent the clearing of a payload. SetValue may use `undefined` in future API versions to mean \"don't change the payload\" (which is useful if e.g. other fields are added to SetValue that can be changed without altering the payload)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly payload: "
                },
                {
                  "kind": "Reference",
                  "text": "Payload",
                  "canonicalReference": "@fluid-experimental/tree!Payload:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "payload",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SetValue#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeType.SetValue",
                  "canonicalReference": "@fluid-experimental/tree!ChangeType.SetValue:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!SetValueInternal_0_0_2:interface",
          "docComment": "/**\n * Modifies the payload of a node.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SetValueInternal_0_0_2 "
            }
          ],
          "releaseTag": "Public",
          "name": "SetValueInternal_0_0_2",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SetValueInternal_0_0_2#nodeToModify:member",
              "docComment": "/**\n * {@inheritdoc SetValue.nodeToModify}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly nodeToModify: "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nodeToModify",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SetValueInternal_0_0_2#payload:member",
              "docComment": "/**\n * Sets or clears the payload. To improve ease of forwards compatibility, an explicit `null` value is used to represent the clearing of a payload. SetValue may use `undefined` in future API versions to mean \"don't change the payload\" (which is useful if e.g. other fields are added to SetValue that can be changed without altering the payload)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly payload: "
                },
                {
                  "kind": "Reference",
                  "text": "Payload",
                  "canonicalReference": "@fluid-experimental/tree!Payload:type"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "payload",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SetValueInternal_0_0_2#type:member",
              "docComment": "/**\n * {@inheritdoc SetValue.\"type\"}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly type: "
                },
                {
                  "kind": "Content",
                  "text": "typeof "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeTypeInternal.SetValue",
                  "canonicalReference": "@fluid-experimental/tree!ChangeTypeInternal.SetValue:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!SetValueInternal:interface",
          "docComment": "/**\n * Modifies the payload of a node.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SetValueInternal extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "SetValueInternal_0_0_2",
              "canonicalReference": "@fluid-experimental/tree!SetValueInternal_0_0_2:interface"
            },
            {
              "kind": "Content",
              "text": ", 'nodeToModify'> "
            }
          ],
          "releaseTag": "Public",
          "name": "SetValueInternal",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SetValueInternal#nodeToModify:member",
              "docComment": "/**\n * {@inheritdoc SetValue.nodeToModify}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly nodeToModify: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "nodeToModify",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-experimental/tree!SharedTree:class",
          "docComment": "/**\n * A [distributed tree](../Readme.md).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SharedTree extends "
            },
            {
              "kind": "Reference",
              "text": "SharedObject",
              "canonicalReference": "@fluidframework/shared-object-base!SharedObject:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ISharedTreeEvents",
              "canonicalReference": "@fluid-experimental/tree!ISharedTreeEvents:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "NodeIdContext",
              "canonicalReference": "@fluid-experimental/tree!NodeIdContext:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SharedTree",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluid-experimental/tree!SharedTree:constructor(1)",
              "docComment": "/**\n * Create a new SharedTree.\n *\n * @param runtime - The runtime the SharedTree will be associated with\n *\n * @param id - Unique ID for the SharedTree\n *\n * @param writeFormat - Determines the format version the SharedTree will write ops and summaries in. See [the write format documentation](../docs/Write-Format.md) for more information.\n *\n * @param options - Configuration options for this tree\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(runtime: "
                },
                {
                  "kind": "Reference",
                  "text": "IFluidDataStoreRuntime",
                  "canonicalReference": "@fluidframework/datastore-definitions!IFluidDataStoreRuntime:interface"
                },
                {
                  "kind": "Content",
                  "text": ", id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTreeArgs",
                  "canonicalReference": "@fluid-experimental/tree!SharedTreeArgs:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WriteFormat.v0_0_2",
                  "canonicalReference": "@fluid-experimental/tree!WriteFormat.v0_0_2:member"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "runtime",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@fluid-experimental/tree!SharedTree:constructor(2)",
              "docComment": "/**\n * Constructs a new instance of the `SharedTree` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(runtime: "
                },
                {
                  "kind": "Reference",
                  "text": "IFluidDataStoreRuntime",
                  "canonicalReference": "@fluidframework/datastore-definitions!IFluidDataStoreRuntime:interface"
                },
                {
                  "kind": "Content",
                  "text": ", id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", ...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTreeArgs",
                  "canonicalReference": "@fluid-experimental/tree!SharedTreeArgs:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WriteFormat.v0_1_1",
                  "canonicalReference": "@fluid-experimental/tree!WriteFormat.v0_1_1:member"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "runtime",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#applyEdit:member(1)",
              "docComment": "/**\n * Applies a set of changes to this tree. The result will be reflected in `SharedTree.currentView`. This method does not allow for snapshot isolation, as the changes are always applied to the most recent revision. If it is desireable to read from and apply changes to a fixed view that does not change when remote changes arrive, `Checkout` should be used instead.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "applyEdit(...changes: "
                },
                {
                  "kind": "Reference",
                  "text": "Change",
                  "canonicalReference": "@fluid-experimental/tree!Change:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Edit",
                  "canonicalReference": "@fluid-experimental/tree!Edit:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "InternalizedChange",
                  "canonicalReference": "@fluid-experimental/tree!InternalizedChange:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "changes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "applyEdit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#applyEdit:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "applyEdit(changes: "
                },
                {
                  "kind": "Reference",
                  "text": "Change",
                  "canonicalReference": "@fluid-experimental/tree!Change:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Edit",
                  "canonicalReference": "@fluid-experimental/tree!Edit:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "InternalizedChange",
                  "canonicalReference": "@fluid-experimental/tree!InternalizedChange:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "changes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "applyEdit"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#applyStashedOp:member(1)",
              "docComment": "/**\n * \"Pending local state\" refers to ops submitted to the runtime that have not yet been acked. When closing a container, hosts have the option to stash this pending local state somewhere to be reapplied later (to avoid data loss). If a host then loads a container using that stashed state, this function is called for each stashed op, and is expected to: 1. Update this DDS to reflect that state locally. 2. Return any `localOpMetadata` that would have been associated with this op.\n *\n * @param content - op to apply locally.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected applyStashedOp(op: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "StashedLocalOpMetadata",
                  "canonicalReference": "@fluid-experimental/tree!StashedLocalOpMetadata:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "op",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "applyStashedOp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#attributeNodeId:member(1)",
              "docComment": "/**\n * Returns the attribution ID associated with the SharedTree that generated the given node ID. This is generally only useful for clients with a write format of 0.1.1 or greater since older clients cannot be given an attribution ID and will always use the default `attributionId` of the tree.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attributeNodeId(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "AttributionId",
                  "canonicalReference": "@fluid-experimental/tree!AttributionId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "attributeNodeId"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#attributionId:member",
              "docComment": "/**\n * The UUID used for attribution of nodes created by this SharedTree. All shared trees with a write format of 0.1.1 or greater have a unique attribution ID which may be configured in the constructor. All other shared trees (i.e. those with a write format of 0.0.2) use the nil UUID as their attribution ID.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get attributionId(): "
                },
                {
                  "kind": "Reference",
                  "text": "AttributionId",
                  "canonicalReference": "@fluid-experimental/tree!AttributionId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "attributionId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#convertToNodeId:member(1)",
              "docComment": "/**\n * Given a stable ID, return the corresponding NodeId or throws if the supplied stable ID was never generated with this tree, either as a UUID corresponding to a `NodeId` or as an override passed to `generateNodeId`. If a stable ID is returned, this does not imply that there is a node with `id` in the current revision of the tree, only that `id` was at some point generated by an instance of this SharedTree.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "convertToNodeId(id: "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "convertToNodeId"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#convertToStableNodeId:member(1)",
              "docComment": "/**\n * Given a NodeId, returns the corresponding stable ID or throws if the supplied node ID was not generated with this tree (`NodeId`s may not be used across SharedTree instances, see `generateNodeId` for more). The returned value will be a UUID, unless the creation of `id` used an override string (see `generateNodeId` for more). The result is safe to persist and re-use across `SharedTree` instances, unlike `NodeId`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "convertToStableNodeId(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "convertToStableNodeId"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree.create:member(1)",
              "docComment": "/**\n * Create a new SharedTree. It will contain the default value (see initialTree).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(runtime: "
                },
                {
                  "kind": "Reference",
                  "text": "IFluidDataStoreRuntime",
                  "canonicalReference": "@fluidframework/datastore-definitions!IFluidDataStoreRuntime:interface"
                },
                {
                  "kind": "Content",
                  "text": ", id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "runtime",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "create"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#currentView:member",
              "docComment": "/**\n * @returns the current view of the tree.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get currentView(): "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "currentView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#edits:member",
              "docComment": "/**\n * @returns the edit history of the tree.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get edits(): "
                },
                {
                  "kind": "Reference",
                  "text": "OrderedEditSet",
                  "canonicalReference": "@fluid-experimental/tree!OrderedEditSet:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "InternalizedChange",
                  "canonicalReference": "@fluid-experimental/tree!InternalizedChange:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "edits",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#generateNodeId:member(1)",
              "docComment": "/**\n * Generates a node identifier. The returned IDs may be used as the identifier of a node in the SharedTree. `NodeId`s are *always* unique and stable within the scope of the tree and session that generated them. They are *not* unique within a Fluid container, and *cannot* be compared across instances of a SharedTree. They are *not* stable across sessions/lifetimes of a SharedTree, and *cannot* be persisted (e.g. stored in payloads, uploaded in blobs, etc.). If stable persistence is needed, NodeIdConverter.convertToStableNodeId may be used to return a corresponding UUID that is globally unique and stable.\n *\n * @param override - if supplied, calls to `convertToStableNodeId` using the returned node ID will return the override instead of the UUID. Calls to `generateNodeId` with the same override always return the same ID. Performance note: passing an override string incurs a storage cost that is significantly higher that a node ID without one, and should be avoided if possible.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "generateNodeId(override?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "override",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "generateNodeId"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree.getFactory:member(1)",
              "docComment": "/**\n * Get a factory for SharedTree to register with the data store.\n *\n * @param writeFormat - Determines the format version the SharedTree will write ops and summaries in. This format may be updated to a newer (supported) version at runtime if a collaborating shared-tree that was initialized with a newer write version connects to the session. Care must be taken when changing this value, as a staged rollout must of occurred such that all collaborating clients must have the code to read at least the version written. See [the write format documentation](../docs/Write-Format.md) for more information.\n *\n * @param options - Configuration options for this tree\n *\n * @returns A factory that creates `SharedTree`s and loads them from storage.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getFactory(...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTreeArgs",
                  "canonicalReference": "@fluid-experimental/tree!SharedTreeArgs:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WriteFormat.v0_0_2",
                  "canonicalReference": "@fluid-experimental/tree!WriteFormat.v0_0_2:member"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTreeFactory",
                  "canonicalReference": "@fluid-experimental/tree!SharedTreeFactory:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "name": "getFactory"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree.getFactory:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getFactory(...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTreeArgs",
                  "canonicalReference": "@fluid-experimental/tree!SharedTreeArgs:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WriteFormat.v0_1_1",
                  "canonicalReference": "@fluid-experimental/tree!WriteFormat.v0_1_1:member"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTreeFactory",
                  "canonicalReference": "@fluid-experimental/tree!SharedTreeFactory:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "name": "getFactory"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#getRuntime:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getRuntime(): "
                },
                {
                  "kind": "Reference",
                  "text": "IFluidDataStoreRuntime",
                  "canonicalReference": "@fluidframework/datastore-definitions!IFluidDataStoreRuntime:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getRuntime"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#getWriteFormat:member(1)",
              "docComment": "/**\n * The write format version currently used by this `SharedTree`. This is always initialized to the write format passed to the tree's constructor, but it may automatically upgrade over time (e.g. when connected to another SharedTree with a higher write format, or when loading a summary with a higher write format).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getWriteFormat(): "
                },
                {
                  "kind": "Reference",
                  "text": "WriteFormat",
                  "canonicalReference": "@fluid-experimental/tree!WriteFormat:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getWriteFormat"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#loadCore:member(1)",
              "docComment": "/**\n * {@inheritDoc @fluidframework/shared-object-base#SharedObject.loadCore}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected loadCore(storage: "
                },
                {
                  "kind": "Reference",
                  "text": "IChannelStorageService",
                  "canonicalReference": "@fluidframework/datastore-definitions!IChannelStorageService:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "storage",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "loadCore"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#logger:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly logger: "
                },
                {
                  "kind": "Reference",
                  "text": "ITelemetryLogger",
                  "canonicalReference": "@fluidframework/common-definitions!ITelemetryLogger:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "logger",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#logViewer:member",
              "docComment": "/**\n * Viewer for trees defined by editLog. This allows access to views of the tree at different revisions (various points in time).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get logViewer(): "
                },
                {
                  "kind": "Reference",
                  "text": "LogViewer",
                  "canonicalReference": "@fluid-experimental/tree!LogViewer:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "logViewer",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#mergeEditsFrom:member(1)",
              "docComment": "/**\n * Merges `edits` from `other` into this SharedTree.\n *\n * @param other - Tree containing the edits that should be applied to this one.\n *\n * @param edits - Iterable of edits from `other` to apply.\n *\n * @param stableIdRemapper - Optional remapper to translate stable identities from `other` into stable identities on this tree. Any references that `other` contains to a stable id `foo` will be replaced with references to the id `stableIdRemapper(foo)`.\n *\n * Payloads on the edits are left intact.\n *\n * @returns a list containing `EditId`s for all applied edits.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mergeEditsFrom(other: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": ", edits: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Edit",
                  "canonicalReference": "@fluid-experimental/tree!Edit:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "InternalizedChange",
                  "canonicalReference": "@fluid-experimental/tree!InternalizedChange:interface"
                },
                {
                  "kind": "Content",
                  "text": ">>"
                },
                {
                  "kind": "Content",
                  "text": ", stableIdRemapper?: "
                },
                {
                  "kind": "Content",
                  "text": "(id: "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ") => "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 17
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "other",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "edits",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 9
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "stableIdRemapper",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 14
                  },
                  "isOptional": true
                }
              ],
              "name": "mergeEditsFrom"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#onDisconnect:member(1)",
              "docComment": "/**\n * {@inheritDoc @fluidframework/shared-object-base#SharedObject.onDisconnect}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected onDisconnect(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "onDisconnect"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#processCore:member(1)",
              "docComment": "/**\n * {@inheritDoc @fluidframework/shared-object-base#SharedObject.processCore}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected processCore(message: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ", local: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "message",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "local",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "processCore"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#registerCore:member(1)",
              "docComment": "/**\n * {@inheritDoc @fluidframework/shared-object-base#SharedObject.registerCore}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected registerCore(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "registerCore"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#reSubmitCore:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected reSubmitCore(op: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ", localOpMetadata?: "
                },
                {
                  "kind": "Reference",
                  "text": "StashedLocalOpMetadata",
                  "canonicalReference": "@fluid-experimental/tree!StashedLocalOpMetadata:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "op",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "localOpMetadata",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "reSubmitCore"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#revert:member(1)",
              "docComment": "/**\n * Reverts a previous edit by applying a new edit containing the inverse of the original edit's changes.\n *\n * @param editId - the edit to revert\n *\n * @returns the id of the new edit, or undefined if the original edit could not be inverted given the current tree state.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "revert(editId: "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EditId",
                  "canonicalReference": "@fluid-experimental/tree!EditId:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "editId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "revert"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#summarizeCore:member(1)",
              "docComment": "/**\n * {@inheritDoc @fluidframework/shared-object-base#SharedObject.summarizeCore}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "summarizeCore(serializer: "
                },
                {
                  "kind": "Reference",
                  "text": "IFluidSerializer",
                  "canonicalReference": "@fluidframework/shared-object-base!IFluidSerializer:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ISummaryTreeWithStats",
                  "canonicalReference": "@fluidframework/runtime-definitions!ISummaryTreeWithStats:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "serializer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "summarizeCore"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#tryConvertToNodeId:member(1)",
              "docComment": "/**\n * Given a stable ID, return the corresponding NodeId or return undefined if the supplied stable ID was never generated with this tree, either as a UUID corresponding to a `NodeId` or as an override passed to `generateNodeId`. If a stable ID is returned, this does not imply that there is a node with `id` in the current revision of the tree, only that `id` was at some point generated by an instance of this SharedTree.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryConvertToNodeId(id: "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "tryConvertToNodeId"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTree#tryConvertToStableNodeId:member(1)",
              "docComment": "/**\n * Given a NodeId, attempt to return the corresponding stable ID. The returned value will be a UUID, unless the creation of `id` used an override string (see `generateNodeId` for more). The returned stable ID is undefined if `id` was never created with this SharedTree. If a stable ID is returned, this does not imply that there is a node with `id` in the current revision of the tree, only that `id` was at some point generated by some instance of this tree.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryConvertToStableNodeId(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "tryConvertToStableNodeId"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "implementsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 7
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!SharedTreeArgs:type",
          "docComment": "/**\n * The write format and associated options used to construct a `SharedTree`\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SharedTreeArgs<WF extends "
            },
            {
              "kind": "Reference",
              "text": "WriteFormat",
              "canonicalReference": "@fluid-experimental/tree!WriteFormat:enum"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "WriteFormat",
              "canonicalReference": "@fluid-experimental/tree!WriteFormat:enum"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "[writeFormat: WF, options?: "
            },
            {
              "kind": "Reference",
              "text": "SharedTreeOptions",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeOptions:type"
            },
            {
              "kind": "Content",
              "text": "<WF>]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SharedTreeArgs",
          "typeParameters": [
            {
              "typeParameterName": "WF",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 6,
            "endIndex": 9
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluid-experimental/tree!sharedTreeAssertionErrorType:var",
          "docComment": "/**\n * Assertion failures in SharedTree will throw an exception containing this value as an `errorType`. The Fluid runtime propagates this field in its handlings of errors thrown by containers. See https://github.com/microsoft/FluidFramework/blob/main/packages/loader/container-utils/src/error.ts\n *\n * Exporting this enables users to safely filter telemetry handling of errors based on their type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "sharedTreeAssertionErrorType = \"SharedTreeAssertion\""
            }
          ],
          "releaseTag": "Public",
          "name": "sharedTreeAssertionErrorType",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluid-experimental/tree!SharedTreeDiagnosticEvent:enum",
          "docComment": "/**\n * An event emitted by a `SharedTree` for diagnostic purposes. See {@link ISharedTreeEvents} for event argument information.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum SharedTreeDiagnosticEvent "
            }
          ],
          "releaseTag": "Public",
          "name": "SharedTreeDiagnosticEvent",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeDiagnosticEvent.AppliedEdit:member",
              "docComment": "/**\n * A valid edit (local or remote) has been applied. Passed the EditId of the applied edit. Note that this may be called multiple times, due to concurrent edits causing reordering, and/or due to not caching the output of every edit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "AppliedEdit = "
                },
                {
                  "kind": "Content",
                  "text": "\"appliedEdit\""
                }
              ],
              "releaseTag": "Public",
              "name": "AppliedEdit",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeDiagnosticEvent.CatchUpBlobUploaded:member",
              "docComment": "/**\n * A single catch up blob has been uploaded.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "CatchUpBlobUploaded = "
                },
                {
                  "kind": "Content",
                  "text": "\"uploadedCatchUpBlob\""
                }
              ],
              "releaseTag": "Public",
              "name": "CatchUpBlobUploaded",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeDiagnosticEvent.DroppedInvalidEdit:member",
              "docComment": "/**\n * An invalid edit (local or remote) has been dropped. Passed the EditId of the dropped edit. Note that this may be called multiple times, due to concurrent edits causing reordering, and/or due to not caching the output of every edit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DroppedInvalidEdit = "
                },
                {
                  "kind": "Content",
                  "text": "\"droppedInvalidEdit\""
                }
              ],
              "releaseTag": "Public",
              "name": "DroppedInvalidEdit",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeDiagnosticEvent.DroppedMalformedEdit:member",
              "docComment": "/**\n * A malformed edit (local or remote) has been dropped. Passed the EditId of the dropped edit. Note that this may be called multiple times, due to concurrent edits causing reordering, and/or due to not caching the output of every edit.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "DroppedMalformedEdit = "
                },
                {
                  "kind": "Content",
                  "text": "\"droppedMalformedEdit\""
                }
              ],
              "releaseTag": "Public",
              "name": "DroppedMalformedEdit",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeDiagnosticEvent.EditChunkUploaded:member",
              "docComment": "/**\n * An edit chunk blob has been uploaded. This includes catchup blobs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EditChunkUploaded = "
                },
                {
                  "kind": "Content",
                  "text": "\"uploadedEditChunk\""
                }
              ],
              "releaseTag": "Public",
              "name": "EditChunkUploaded",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeDiagnosticEvent.UnexpectedHistoryChunk:member",
              "docComment": "/**\n * A history chunk has been received that does not have a corresponding edit chunk on the edit log.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "UnexpectedHistoryChunk = "
                },
                {
                  "kind": "Content",
                  "text": "\"unexpectedHistoryChunk\""
                }
              ],
              "releaseTag": "Public",
              "name": "UnexpectedHistoryChunk",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeDiagnosticEvent.WriteVersionChanged:member",
              "docComment": "/**\n * The current write format changed, either because an old summary was loaded or an update op was successfully processed. This event is emitted with the new version as an argument.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "WriteVersionChanged = "
                },
                {
                  "kind": "Content",
                  "text": "\"writeVersionChanged\""
                }
              ],
              "releaseTag": "Public",
              "name": "WriteVersionChanged",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluid-experimental/tree!SharedTreeEvent:enum",
          "docComment": "/**\n * An event emitted by a `SharedTree` to indicate a state change. See {@link ISharedTreeEvents} for event argument information.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum SharedTreeEvent "
            }
          ],
          "releaseTag": "Public",
          "name": "SharedTreeEvent",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeEvent.EditCommitted:member",
              "docComment": "/**\n * An edit has been committed to the log. This happens when either: 1. A locally generated edit is added to the log. 2. A remotely generated edit is added to the log. Note that, for locally generated edits, this event will not be emitted again when that edit is sequenced. Passed the EditId of the committed edit, i.e. supports callbacks of type {@link EditCommittedHandler}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "EditCommitted = "
                },
                {
                  "kind": "Content",
                  "text": "\"committedEdit\""
                }
              ],
              "releaseTag": "Public",
              "name": "EditCommitted",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeEvent.SequencedEditApplied:member",
              "docComment": "/**\n * A sequenced edit has been applied. This includes local edits though the callback is only invoked once the sequenced version is received. For edits that were local (see {@link SequencedEditAppliedEventArguments.wasLocal}, this callback will only be called once. For non-local edits, it may be called multiple times: the number of calls and when they occur depends on caching and is an implementation detail. Supports callbacks of type {@link SequencedEditAppliedHandler}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "SequencedEditApplied = "
                },
                {
                  "kind": "Content",
                  "text": "\"sequencedEditApplied\""
                }
              ],
              "releaseTag": "Public",
              "name": "SequencedEditApplied",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-experimental/tree!SharedTreeFactory:class",
          "docComment": "/**\n * Factory for SharedTree. Includes history in the summary.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SharedTreeFactory implements "
            },
            {
              "kind": "Reference",
              "text": "IChannelFactory",
              "canonicalReference": "@fluidframework/datastore-definitions!IChannelFactory:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SharedTreeFactory",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeFactory:constructor(1)",
              "docComment": "/**\n * Get a factory for SharedTree to register with the data store.\n *\n * @param writeFormat - Determines the format version the SharedTree will write ops and summaries in. See [the write format documentation](../docs/Write-Format.md) for more information.\n *\n * @param options - Configuration options for this tree\n *\n * @returns A factory that creates `SharedTree`s and loads them from storage.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTreeArgs",
                  "canonicalReference": "@fluid-experimental/tree!SharedTreeArgs:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WriteFormat.v0_0_2",
                  "canonicalReference": "@fluid-experimental/tree!WriteFormat.v0_0_2:member"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeFactory:constructor(2)",
              "docComment": "/**\n * Constructs a new instance of the `SharedTreeFactory` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(...args: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTreeArgs",
                  "canonicalReference": "@fluid-experimental/tree!SharedTreeArgs:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "WriteFormat.v0_1_1",
                  "canonicalReference": "@fluid-experimental/tree!WriteFormat.v0_1_1:member"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeFactory#attributes:member",
              "docComment": "/**\n * {@inheritDoc @fluidframework/shared-object-base#ISharedObjectFactory.attributes}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get attributes(): "
                },
                {
                  "kind": "Reference",
                  "text": "IChannelAttributes",
                  "canonicalReference": "@fluidframework/datastore-definitions!IChannelAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "attributes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeFactory.Attributes:member",
              "docComment": "/**\n * {@inheritDoc @fluidframework/shared-object-base#ISharedObjectFactory.attributes}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Attributes: "
                },
                {
                  "kind": "Reference",
                  "text": "IChannelAttributes",
                  "canonicalReference": "@fluidframework/datastore-definitions!IChannelAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Attributes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeFactory#create:member(1)",
              "docComment": "/**\n * Create a new SharedTree.\n *\n * @param runtime - data store runtime that owns the new SharedTree\n *\n * @param id - optional name for the SharedTree\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "create(runtime: "
                },
                {
                  "kind": "Reference",
                  "text": "IFluidDataStoreRuntime",
                  "canonicalReference": "@fluidframework/datastore-definitions!IFluidDataStoreRuntime:interface"
                },
                {
                  "kind": "Content",
                  "text": ", id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "runtime",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeFactory#load:member(1)",
              "docComment": "/**\n * {@inheritDoc @fluidframework/shared-object-base#ISharedObjectFactory.load}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "load(runtime: "
                },
                {
                  "kind": "Reference",
                  "text": "IFluidDataStoreRuntime",
                  "canonicalReference": "@fluidframework/datastore-definitions!IFluidDataStoreRuntime:interface"
                },
                {
                  "kind": "Content",
                  "text": ", id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", services: "
                },
                {
                  "kind": "Reference",
                  "text": "IChannelServices",
                  "canonicalReference": "@fluidframework/datastore-definitions!IChannelServices:interface"
                },
                {
                  "kind": "Content",
                  "text": ", _channelAttributes: "
                },
                {
                  "kind": "Reference",
                  "text": "Readonly",
                  "canonicalReference": "!Readonly:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IChannelAttributes",
                  "canonicalReference": "@fluidframework/datastore-definitions!IChannelAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "IChannel",
                  "canonicalReference": "@fluidframework/datastore-definitions!IChannel:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "runtime",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "services",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "_channelAttributes",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  },
                  "isOptional": false
                }
              ],
              "name": "load"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeFactory#type:member",
              "docComment": "/**\n * {@inheritDoc @fluidframework/shared-object-base#ISharedObjectFactory.\"type\"}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get type(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeFactory.Type:member",
              "docComment": "/**\n * {@inheritDoc @fluidframework/shared-object-base#ISharedObjectFactory.\"type\"}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static Type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "Type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-experimental/tree!SharedTreeMergeHealthTelemetryHeartbeat:class",
          "docComment": "/**\n * Aggregates and logs telemetry about the success of concurrent edits.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SharedTreeMergeHealthTelemetryHeartbeat "
            }
          ],
          "releaseTag": "Public",
          "name": "SharedTreeMergeHealthTelemetryHeartbeat",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeMergeHealthTelemetryHeartbeat#attachTree:member(1)",
              "docComment": "/**\n * Adds a tree to the set of tree to log merge health telemetry for. Noop if such a tree was already in the set.\n *\n * @param tree - The tree to log merge health telemetry for.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attachTree(tree: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tree",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "attachTree"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeMergeHealthTelemetryHeartbeat#clearData:member(1)",
              "docComment": "/**\n * Resets all aggregated state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearData(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "clearData"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeMergeHealthTelemetryHeartbeat#detachAllTrees:member(1)",
              "docComment": "/**\n * Removes all trees from the set of tree to log merge health telemetry for.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "detachAllTrees(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "detachAllTrees"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeMergeHealthTelemetryHeartbeat#detachTree:member(1)",
              "docComment": "/**\n * Removes a tree from the set of tree to log merge health telemetry for. Noop if such a tree was never in the set.\n *\n * @param tree - The tree to stop logging merge health telemetry for.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "detachTree(tree: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tree",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "detachTree"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeMergeHealthTelemetryHeartbeat#flushHeartbeat:member(1)",
              "docComment": "/**\n * Sends all collected merge health data and resets the aggregated state.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "flushHeartbeat(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "flushHeartbeat"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeMergeHealthTelemetryHeartbeat#getStats:member(1)",
              "docComment": "/**\n * Exposes the aggregated statistics about merge health for the given tree.\n *\n * @param tree - The tree to get stats for.\n *\n * @returns Aggregated statistics about merge health for the given tree.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getStats(tree: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "MergeHealthStats",
                  "canonicalReference": "@fluid-experimental/tree!MergeHealthStats:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tree",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getStats"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeMergeHealthTelemetryHeartbeat#resetTreeData:member(1)",
              "docComment": "/**\n * Resets the aggregated merge health data for the given tree.\n *\n * @param tree - The tree to reset the merge health data for.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resetTreeData(tree: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tree",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "resetTreeData"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeMergeHealthTelemetryHeartbeat#startHeartbeat:member(1)",
              "docComment": "/**\n * Enables the regular telemetry logging of merge health data. The first message will be sent after `interval` milliseconds. See {@link SharedTreeMergeHealthTelemetryHeartbeat.flushHeartbeat} for immediate logging.\n *\n * @param interval - The amount of time in milliseconds between log messages.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startHeartbeat(interval?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "interval",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": true
                }
              ],
              "name": "startHeartbeat"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeMergeHealthTelemetryHeartbeat#stopHeartbeat:member(1)",
              "docComment": "/**\n * Disables the regular telemetry logging of merge health data.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stopHeartbeat(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "stopHeartbeat"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!SharedTreeOptions_0_0_2:interface",
          "docComment": "/**\n * Configuration options for a SharedTree with write format 0.0.2\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SharedTreeOptions_0_0_2 "
            }
          ],
          "releaseTag": "Public",
          "name": "SharedTreeOptions_0_0_2",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeOptions_0_0_2#summarizeHistory:member",
              "docComment": "/**\n * Determines if the history is included in summaries.\n *\n * Warning: enabling history summarization incurs a permanent cost in the document. It is not possible to disable history summarization later once it has been enabled, and thus the history cannot be safely deleted.\n *\n * On 0.1.1 documents, due to current code limitations, this parameter is only impactful for newly created documents. `SharedTree`s which load existing documents will summarize history if and only if the loaded summary included history.\n *\n * The technical limitations here relate to clients with mixed versions collaborating. In the future we may allow modification of whether or not a particular document saves history, but only via a consensus mechanism. See the skipped test in SharedTreeFuzzTests.ts for more details on this issue. See docs/Breaking-Change-Migration for more details on the consensus scheme.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "summarizeHistory?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "summarizeHistory",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!SharedTreeOptions_0_1_1:interface",
          "docComment": "/**\n * Configuration options for a SharedTree with write format 0.1.1\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SharedTreeOptions_0_1_1 "
            }
          ],
          "releaseTag": "Public",
          "name": "SharedTreeOptions_0_1_1",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeOptions_0_1_1#attributionId:member",
              "docComment": "/**\n * a UUID that identifies the user of this tree; all node IDs generated by this tree will be associated with this UUID\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attributionId?: "
                },
                {
                  "kind": "Reference",
                  "text": "AttributionId",
                  "canonicalReference": "@fluid-experimental/tree!AttributionId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "attributionId",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeOptions_0_1_1#summarizeHistory:member",
              "docComment": "/**\n * Determines if the history is included in summaries and if edit chunks are uploaded when they are full.\n *\n * Warning: enabling history summarization incurs a permanent cost in the document. It is not possible to disable history summarization later once it has been enabled, and thus the history cannot be safely deleted.\n *\n * On 0.1.1 documents, due to current code limitations, this parameter is only impactful for newly created documents. `SharedTree`s which load existing documents will summarize history if and only if the loaded summary included history.\n *\n * The technical limitations here relate to clients with mixed versions collaborating. In the future we may allow modification of whether or not a particular document saves history, but only via a consensus mechanism. See the skipped test in SharedTreeFuzzTests.ts for more details on this issue. See docs/Breaking-Change-Migration for more details on the consensus scheme.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "summarizeHistory?: "
                },
                {
                  "kind": "Content",
                  "text": "false | {\n        uploadEditChunks: boolean;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "summarizeHistory",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!SharedTreeOptions:type",
          "docComment": "/**\n * The type of shared tree options for a given write format\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SharedTreeOptions<WF extends "
            },
            {
              "kind": "Reference",
              "text": "WriteFormat",
              "canonicalReference": "@fluid-experimental/tree!WriteFormat:enum"
            },
            {
              "kind": "Content",
              "text": ", HistoryCompatibility extends "
            },
            {
              "kind": "Content",
              "text": "'Forwards' | 'None' "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Content",
              "text": "'Forwards'"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<WF extends "
            },
            {
              "kind": "Reference",
              "text": "WriteFormat.v0_0_2",
              "canonicalReference": "@fluid-experimental/tree!WriteFormat.v0_0_2:member"
            },
            {
              "kind": "Content",
              "text": " ? "
            },
            {
              "kind": "Reference",
              "text": "SharedTreeOptions_0_0_2",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeOptions_0_0_2:interface"
            },
            {
              "kind": "Content",
              "text": " : WF extends "
            },
            {
              "kind": "Reference",
              "text": "WriteFormat.v0_1_1",
              "canonicalReference": "@fluid-experimental/tree!WriteFormat.v0_1_1:member"
            },
            {
              "kind": "Content",
              "text": " ? "
            },
            {
              "kind": "Reference",
              "text": "SharedTreeOptions_0_1_1",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeOptions_0_1_1:interface"
            },
            {
              "kind": "Content",
              "text": " : never, HistoryCompatibility extends 'Forwards' ? 'summarizeHistory' : never>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SharedTreeOptions",
          "typeParameters": [
            {
              "typeParameterName": "WF",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "HistoryCompatibility",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 7,
            "endIndex": 17
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!SharedTreeSummaryBase:interface",
          "docComment": "/**\n * The minimal information on a SharedTree summary. Contains the summary format version.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SharedTreeSummaryBase "
            }
          ],
          "releaseTag": "Public",
          "name": "SharedTreeSummaryBase",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SharedTreeSummaryBase#version:member",
              "docComment": "/**\n * Field on summary under which version is stored.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly version: "
                },
                {
                  "kind": "Reference",
                  "text": "WriteFormat",
                  "canonicalReference": "@fluid-experimental/tree!WriteFormat:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluid-experimental/tree!Side:enum",
          "docComment": "/**\n * Defines a place relative to sibling. The \"outside\" of a trait is the `undefined` sibling, so After `undefined` is the beginning of the trait, and before `undefined` is the end.\n *\n * For this purpose, traits look like:\n *\n * `{undefined} - {Node 0} - {Node 1} - ... - {Node N} - {undefined}`\n *\n * Each `{value}` in the diagram is a possible sibling, which is either a Node or undefined. Each `-` in the above diagram is a `Place`, and can be describe as being `After` a particular `{sibling}` or `Before` it. This means that `After` `{undefined}` means the same `Place` as before the first node and `Before` `{undefined}` means the `Place` after the last Node.\n *\n * Each place can be specified, (aka 'anchored') in two ways (relative to the sibling before or after): the choice of which way to anchor a place only matters when the kept across an edit, and thus evaluated in multiple contexts where the two place description may no longer evaluate to the same place.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum Side "
            }
          ],
          "releaseTag": "Public",
          "name": "Side",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!Side.After:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "After = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "After",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!Side.Before:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "Before = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Before",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!StableNodeId:type",
          "docComment": "/**\n * Globally unique node identifier. Uniquely identifies a node within and across documents. Can be used across SharedTree instances.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type StableNodeId = "
            },
            {
              "kind": "Content",
              "text": "string & {\n    readonly StableNodeId: 'a0843b38-699d-4bb2-aa7a-16c502a71151';\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "StableNodeId",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!StablePlace:interface",
          "docComment": "/**\n * A location in a trait. This is NOT the location of a node, but a location where a node could be inserted: it is next to a sibling or at one end of the trait.\n *\n * To be well formed, either `sibling` or `trait` must be defined, but not both.\n *\n * Any given insertion location can be described by two `StablePlace` objects, one with `Side.After` and one with `Side.Before`. For example, in a trait containing two strings \"foo\" and \"bar\", there are 6 different `StablePlace`s corresponding to 3 locations in the trait a new node could be inserted: at the start, before \"foo\", after \"foo\", before \"bar\", after \"bar\", and at the end. Neither of the two ways to specify the same location are considered to be after each other.\n *\n * The anchor (`referenceSibling` or `referenceTrait`) used for a particular `StablePlace` can have an impact in collaborative scenarios.\n *\n * `StablePlace` objects can be conveniently constructed with the helper methods exported on a constant of the same name.\n *\n * @example\n *\n * StablePlace.before(node) StablePlace.atStartOf(trait)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StablePlace "
            }
          ],
          "releaseTag": "Public",
          "name": "StablePlace",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StablePlace#referenceSibling:member",
              "docComment": "/**\n * The sibling to which this 'StablePlace' is anchored (by 'side'). If specified, referenceTrait must be unspecified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly referenceSibling?: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "referenceSibling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StablePlace#referenceTrait:member",
              "docComment": "/**\n * The trait to which this 'StablePlace' is anchored (by 'side'). If specified, referenceSibling must be unspecified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly referenceTrait?: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLocation",
                  "canonicalReference": "@fluid-experimental/tree!TraitLocation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "referenceTrait",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StablePlace#side:member",
              "docComment": "/**\n * Where this StablePlace is relative to the sibling (if specified), or an end of the trait (if no sibling specified). If 'After' and there is no sibling, this StablePlace is after the front of the trait. If 'Before' and there is no sibling, this StablePlace is before the back of the trait.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly side: "
                },
                {
                  "kind": "Reference",
                  "text": "Side",
                  "canonicalReference": "@fluid-experimental/tree!Side:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "side",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluid-experimental/tree!StablePlace:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StablePlace: "
            },
            {
              "kind": "Content",
              "text": "{\n    before: (node: "
            },
            {
              "kind": "Reference",
              "text": "NodeData",
              "canonicalReference": "@fluid-experimental/tree!NodeData:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StablePlace",
              "canonicalReference": "@fluid-experimental/tree!StablePlace:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    after: (node: "
            },
            {
              "kind": "Reference",
              "text": "NodeData",
              "canonicalReference": "@fluid-experimental/tree!NodeData:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StablePlace",
              "canonicalReference": "@fluid-experimental/tree!StablePlace:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    atStartOf: (trait: "
            },
            {
              "kind": "Reference",
              "text": "TraitLocation",
              "canonicalReference": "@fluid-experimental/tree!TraitLocation:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StablePlace",
              "canonicalReference": "@fluid-experimental/tree!StablePlace:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    atEndOf: (trait: "
            },
            {
              "kind": "Reference",
              "text": "TraitLocation",
              "canonicalReference": "@fluid-experimental/tree!TraitLocation:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StablePlace",
              "canonicalReference": "@fluid-experimental/tree!StablePlace:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "StablePlace",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 26
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal_0_0_2:interface",
          "docComment": "/**\n * A location in a trait. This is NOT the location of a node, but a location where a node could be inserted: it is next to a sibling or at one end of the trait.\n *\n * To be well formed, either `sibling` or `trait` must be defined, but not both.\n *\n * Any given insertion location can be described by two `StablePlace` objects, one with `Side.After` and one with `Side.Before`. For example, in a trait containing two strings \"foo\" and \"bar\", there are 6 different `StablePlace`s corresponding to 3 locations in the trait a new node could be inserted: at the start, before \"foo\", after \"foo\", before \"bar\", after \"bar\", and at the end. Neither of the two ways to specify the same location are considered to be after each other.\n *\n * The anchor (`referenceSibling` or `referenceTrait`) used for a particular `StablePlace` can have an impact in collaborative scenarios.\n *\n * `StablePlace` objects can be conveniently constructed with the helper methods exported on a constant of the same name.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StablePlaceInternal_0_0_2 "
            }
          ],
          "releaseTag": "Public",
          "name": "StablePlaceInternal_0_0_2",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal_0_0_2#referenceSibling:member",
              "docComment": "/**\n * The sibling to which this 'StablePlace' is anchored (by 'side'). If specified, referenceTrait must be unspecified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly referenceSibling?: "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "referenceSibling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal_0_0_2#referenceTrait:member",
              "docComment": "/**\n * The trait to which this 'StablePlace' is anchored (by 'side'). If specified, referenceSibling must be unspecified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly referenceTrait?: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLocationInternal_0_0_2",
                  "canonicalReference": "@fluid-experimental/tree!TraitLocationInternal_0_0_2:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "referenceTrait",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal_0_0_2#side:member",
              "docComment": "/**\n * Where this StablePlace is relative to the sibling (if specified), or an end of the trait (if no sibling specified). If 'After' and there is no sibling, this StablePlace is after the front of the trait. If 'Before' and there is no sibling, this StablePlace is before the back of the trait.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly side: "
                },
                {
                  "kind": "Reference",
                  "text": "Side",
                  "canonicalReference": "@fluid-experimental/tree!Side:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "side",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface",
          "docComment": "/**\n * A location in a trait. This is NOT the location of a node, but a location where a node could be inserted: it is next to a sibling or at one end of the trait.\n *\n * To be well formed, either `sibling` or `trait` must be defined, but not both.\n *\n * Any given insertion location can be described by two `StablePlace` objects, one with `Side.After` and one with `Side.Before`. For example, in a trait containing two strings \"foo\" and \"bar\", there are 6 different `StablePlace`s corresponding to 3 locations in the trait a new node could be inserted: at the start, before \"foo\", after \"foo\", before \"bar\", after \"bar\", and at the end. Neither of the two ways to specify the same location are considered to be after each other.\n *\n * The anchor (`referenceSibling` or `referenceTrait`) used for a particular `StablePlace` can have an impact in collaborative scenarios.\n *\n * `StablePlace` objects can be conveniently constructed with the helper methods exported on a constant of the same name.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StablePlaceInternal extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "StablePlaceInternal_0_0_2",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal_0_0_2:interface"
            },
            {
              "kind": "Content",
              "text": ", 'referenceSibling' | 'referenceTrait'> "
            }
          ],
          "releaseTag": "Public",
          "name": "StablePlaceInternal",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal#referenceSibling:member",
              "docComment": "/**\n * The sibling to which this 'StablePlace' is anchored (by 'side'). If specified, referenceTrait must be unspecified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly referenceSibling?: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "referenceSibling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal#referenceTrait:member",
              "docComment": "/**\n * The trait to which this 'StablePlace' is anchored (by 'side'). If specified, referenceSibling must be unspecified.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly referenceTrait?: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLocationInternal",
                  "canonicalReference": "@fluid-experimental/tree!TraitLocationInternal:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "referenceTrait",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StablePlaceInternal: "
            },
            {
              "kind": "Content",
              "text": "{\n    before: (node: "
            },
            {
              "kind": "Reference",
              "text": "NodeData",
              "canonicalReference": "@fluid-experimental/tree!NodeData:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StablePlaceInternal",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    after: (node: "
            },
            {
              "kind": "Reference",
              "text": "NodeData",
              "canonicalReference": "@fluid-experimental/tree!NodeData:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StablePlaceInternal",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    atStartOf: (trait: "
            },
            {
              "kind": "Reference",
              "text": "TraitLocationInternal",
              "canonicalReference": "@fluid-experimental/tree!TraitLocationInternal:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StablePlaceInternal",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    atEndOf: (trait: "
            },
            {
              "kind": "Reference",
              "text": "TraitLocationInternal",
              "canonicalReference": "@fluid-experimental/tree!TraitLocationInternal:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StablePlaceInternal",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "StablePlaceInternal",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 26
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!StableRange:interface",
          "docComment": "/**\n * Specifies the range of nodes from `start` to `end` within a trait. Valid iff start and end are valid and are within the same trait and the start does not occur after the end in the trait.\n *\n * See {@link (StablePlace:interface)} for what it means for a place to be \"after\" another place.\n *\n * `StableRange` objects can be conveniently constructed with the helper methods exported on a constant of the same name.\n *\n * @example\n *\n * StableRange.from(StablePlace.before(startNode)).to(StablePlace.after(endNode))\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StableRange "
            }
          ],
          "releaseTag": "Public",
          "name": "StableRange",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StableRange#end:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly end: "
                },
                {
                  "kind": "Reference",
                  "text": "StablePlace",
                  "canonicalReference": "@fluid-experimental/tree!StablePlace:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "end",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StableRange#start:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly start: "
                },
                {
                  "kind": "Reference",
                  "text": "StablePlace",
                  "canonicalReference": "@fluid-experimental/tree!StablePlace:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "start",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluid-experimental/tree!StableRange:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StableRange: "
            },
            {
              "kind": "Content",
              "text": "{\n    from: (start: "
            },
            {
              "kind": "Reference",
              "text": "StablePlace",
              "canonicalReference": "@fluid-experimental/tree!StablePlace:interface"
            },
            {
              "kind": "Content",
              "text": ") => {\n        to: (end: "
            },
            {
              "kind": "Reference",
              "text": "StablePlace",
              "canonicalReference": "@fluid-experimental/tree!StablePlace:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StableRange",
              "canonicalReference": "@fluid-experimental/tree!StableRange:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    only: (node: "
            },
            {
              "kind": "Reference",
              "text": "NodeData",
              "canonicalReference": "@fluid-experimental/tree!NodeData:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StableRange",
              "canonicalReference": "@fluid-experimental/tree!StableRange:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    all: (trait: "
            },
            {
              "kind": "Reference",
              "text": "TraitLocation",
              "canonicalReference": "@fluid-experimental/tree!TraitLocation:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StableRange",
              "canonicalReference": "@fluid-experimental/tree!StableRange:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "StableRange",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 20
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!StableRangeInternal_0_0_2:interface",
          "docComment": "/**\n * Specifies the range of nodes from `start` to `end` within a trait. Valid iff start and end are valid and are within the same trait and the start does not occur after the end in the trait.\n *\n * See {@link (StablePlace:interface)} for what it means for a place to be \"after\" another place.\n *\n * `StableRange` objects can be conveniently constructed with the helper methods exported on a constant of the same name.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StableRangeInternal_0_0_2 "
            }
          ],
          "releaseTag": "Public",
          "name": "StableRangeInternal_0_0_2",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StableRangeInternal_0_0_2#end:member",
              "docComment": "/**\n * {@inheritdoc (StableRange:interface).end}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly end: "
                },
                {
                  "kind": "Reference",
                  "text": "StablePlaceInternal_0_0_2",
                  "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal_0_0_2:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "end",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StableRangeInternal_0_0_2#start:member",
              "docComment": "/**\n * {@inheritdoc (StableRange:interface).start}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly start: "
                },
                {
                  "kind": "Reference",
                  "text": "StablePlaceInternal_0_0_2",
                  "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal_0_0_2:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "start",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!StableRangeInternal:interface",
          "docComment": "/**\n * Specifies the range of nodes from `start` to `end` within a trait. Valid iff start and end are valid and are within the same trait and the start does not occur after the end in the trait.\n *\n * See {@link (StablePlace:interface)} for what it means for a place to be \"after\" another place.\n *\n * `StableRange` objects can be conveniently constructed with the helper methods exported on a constant of the same name.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StableRangeInternal "
            }
          ],
          "releaseTag": "Public",
          "name": "StableRangeInternal",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StableRangeInternal#end:member",
              "docComment": "/**\n * {@inheritdoc (StableRange:interface).end}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly end: "
                },
                {
                  "kind": "Reference",
                  "text": "StablePlaceInternal",
                  "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "end",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StableRangeInternal#start:member",
              "docComment": "/**\n * {@inheritdoc (StableRange:interface).start}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly start: "
                },
                {
                  "kind": "Reference",
                  "text": "StablePlaceInternal",
                  "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "start",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@fluid-experimental/tree!StableRangeInternal:var",
          "docComment": "/**\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "StableRangeInternal: "
            },
            {
              "kind": "Content",
              "text": "{\n    from: (start: "
            },
            {
              "kind": "Reference",
              "text": "StablePlaceInternal",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
            },
            {
              "kind": "Content",
              "text": ") => {\n        to: (end: "
            },
            {
              "kind": "Reference",
              "text": "StablePlaceInternal",
              "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StableRangeInternal",
              "canonicalReference": "@fluid-experimental/tree!StableRangeInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    };\n    only: (node: "
            },
            {
              "kind": "Reference",
              "text": "NodeData",
              "canonicalReference": "@fluid-experimental/tree!NodeData:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": "> | "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StableRangeInternal",
              "canonicalReference": "@fluid-experimental/tree!StableRangeInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    all: (trait: "
            },
            {
              "kind": "Reference",
              "text": "TraitLocationInternal",
              "canonicalReference": "@fluid-experimental/tree!TraitLocationInternal:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "StableRangeInternal",
              "canonicalReference": "@fluid-experimental/tree!StableRangeInternal:interface"
            },
            {
              "kind": "Content",
              "text": ";\n}"
            }
          ],
          "releaseTag": "Public",
          "name": "StableRangeInternal",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 20
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!StashedLocalOpMetadata:interface",
          "docComment": "/**\n * Contains information resulting from processing stashed shared tree ops\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StashedLocalOpMetadata "
            }
          ],
          "releaseTag": "Public",
          "name": "StashedLocalOpMetadata",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!StashedLocalOpMetadata#transformedEdit:member",
              "docComment": "/**\n * A modified version of the edit in an edit op that should be resubmitted rather than the original edit\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transformedEdit?: "
                },
                {
                  "kind": "Reference",
                  "text": "Edit",
                  "canonicalReference": "@fluid-experimental/tree!Edit:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "transformedEdit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!StringInterner:interface",
          "docComment": "/**\n * Interns strings as integers.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StringInterner "
            }
          ],
          "releaseTag": "Public",
          "name": "StringInterner",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!StringInterner#getInternedId:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getInternedId(input: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "InternedStringId",
                  "canonicalReference": "@fluid-experimental/tree!InternedStringId:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getInternedId"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!StringInterner#getSerializable:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getSerializable(): "
                },
                {
                  "kind": "Content",
                  "text": "readonly string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getSerializable"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-experimental/tree!StringInterner#getString:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getString(internedId: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "internedId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getString"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!SucceedingTransactionState:interface",
          "docComment": "/**\n * The state of a transaction that has not encountered an error.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SucceedingTransactionState "
            }
          ],
          "releaseTag": "Public",
          "name": "SucceedingTransactionState",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SucceedingTransactionState#changes:member",
              "docComment": "/**\n * The applied changes so far.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly changes: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "ChangeInternal",
                  "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "changes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SucceedingTransactionState#status:member",
              "docComment": "/**\n * The current status of the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly status: "
                },
                {
                  "kind": "Reference",
                  "text": "EditStatus.Applied",
                  "canonicalReference": "@fluid-experimental/tree!EditStatus.Applied:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SucceedingTransactionState#steps:member",
              "docComment": "/**\n * The editing steps applied so far.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly steps: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "ReconciliationChange",
                  "canonicalReference": "@fluid-experimental/tree!ReconciliationChange:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "steps",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!SucceedingTransactionState#view:member",
              "docComment": "/**\n * The view reflecting the latest applied change.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly view: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionView",
                  "canonicalReference": "@fluid-experimental/tree!TransactionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "view",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!TraitLabel:type",
          "docComment": "/**\n * Definition. A full (Uuid) persistable label for a trait.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TraitLabel = "
            },
            {
              "kind": "Reference",
              "text": "UuidString",
              "canonicalReference": "@fluid-experimental/tree!UuidString:type"
            },
            {
              "kind": "Content",
              "text": " & {\n    readonly TraitLabel: '613826ed-49cc-4df3-b2b8-bfc6866af8e3';\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TraitLabel",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!TraitLocation:interface",
          "docComment": "/**\n * Specifies the location of a trait (a labeled sequence of nodes) within the tree.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TraitLocation "
            }
          ],
          "releaseTag": "Public",
          "name": "TraitLocation",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TraitLocation#label:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly label: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLabel",
                  "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TraitLocation#parent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly parent: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "parent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!TraitLocationInternal_0_0_2:interface",
          "docComment": "/**\n * Specifies the location of a trait (a labeled sequence of nodes) within the tree.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TraitLocationInternal_0_0_2 "
            }
          ],
          "releaseTag": "Public",
          "name": "TraitLocationInternal_0_0_2",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TraitLocationInternal_0_0_2#label:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly label: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLabel",
                  "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "label",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TraitLocationInternal_0_0_2#parent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly parent: "
                },
                {
                  "kind": "Reference",
                  "text": "StableNodeId",
                  "canonicalReference": "@fluid-experimental/tree!StableNodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "parent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!TraitLocationInternal:interface",
          "docComment": "/**\n * Specifies the location of a trait (a labeled sequence of nodes) within the tree.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TraitLocationInternal extends "
            },
            {
              "kind": "Reference",
              "text": "Omit",
              "canonicalReference": "!Omit:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TraitLocationInternal_0_0_2",
              "canonicalReference": "@fluid-experimental/tree!TraitLocationInternal_0_0_2:interface"
            },
            {
              "kind": "Content",
              "text": ", 'parent'> "
            }
          ],
          "releaseTag": "Public",
          "name": "TraitLocationInternal",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TraitLocationInternal#parent:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly parent: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "parent",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!TraitMap:interface",
          "docComment": "/**\n * Json compatible map as object. Keys are TraitLabels, Values are the content of the trait specified by the key.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TraitMap<TChild> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TChild",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "TraitMap",
          "members": [
            {
              "kind": "IndexSignature",
              "canonicalReference": "@fluid-experimental/tree!TraitMap:index(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly [key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "]: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeNodeSequence",
                  "canonicalReference": "@fluid-experimental/tree!TreeNodeSequence:type"
                },
                {
                  "kind": "Content",
                  "text": "<TChild>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!TraitNodeIndex:type",
          "docComment": "/**\n * Index of a node within a trait. 0 = first node, 1 = second node, etc.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TraitNodeIndex = "
            },
            {
              "kind": "Content",
              "text": "number & {\n    readonly TraitNodeIndex: unique symbol;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TraitNodeIndex",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-experimental/tree!Transaction:class",
          "docComment": "/**\n * Buffers changes to be applied to an isolated view of a `SharedTree` over time before applying them directly to the tree itself as a single edit\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Transaction extends "
            },
            {
              "kind": "Reference",
              "text": "TypedEventEmitter",
              "canonicalReference": "@fluidframework/common-utils!TypedEventEmitter:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TransactionEvents",
              "canonicalReference": "@fluid-experimental/tree!TransactionEvents:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "Transaction",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluid-experimental/tree!Transaction:constructor(1)",
              "docComment": "/**\n * Create a new transaction over the given tree. The tree's `currentView` at this time will become the `startingView` for this transaction.\n *\n * @param tree - the `SharedTree` that this transaction applies changes to\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(tree: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tree",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Transaction#apply:member(1)",
              "docComment": "/**\n * Attempt to apply a sequence of changes in this transaction. The `currentView` will be updated to reflect the new tree state after all applied changes. If any change fails to apply, the remaining changes will be ignored and this transaction will be automatically closed (see `isOpen`). If this transaction is already closed, this method has no effect. This method will emit a `TransactionEvent.ViewChange` event at most once per call.\n *\n * @param changes - the changes to apply\n *\n * @returns either the `EditStatus` of the given changes or the `EditStatus` of the last change before the transaction was closed\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "apply(...changes: "
                },
                {
                  "kind": "Reference",
                  "text": "Change",
                  "canonicalReference": "@fluid-experimental/tree!Change:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EditStatus",
                  "canonicalReference": "@fluid-experimental/tree!EditStatus:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "changes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "apply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Transaction#apply:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "apply(changes: "
                },
                {
                  "kind": "Reference",
                  "text": "Change",
                  "canonicalReference": "@fluid-experimental/tree!Change:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "EditStatus",
                  "canonicalReference": "@fluid-experimental/tree!EditStatus:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "changes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  },
                  "isOptional": false
                }
              ],
              "name": "apply"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!Transaction#closeAndCommit:member(1)",
              "docComment": "/**\n * Close this transaction and apply its changes to the `SharedTree`. If this transaction is already closed, this method has no effect.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "closeAndCommit(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "closeAndCommit"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!Transaction#currentView:member",
              "docComment": "/**\n * The state of the tree following the most change that was successfully applied. If no changes have been applied, this is the same as `startingView`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get currentView(): "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "currentView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!Transaction#isOpen:member",
              "docComment": "/**\n * True if this transaction is open, false if it is closed. A transaction may be closed manually via `closeAndApplyEdit()`, or may be automatically closed by a change in this transaction failing to apply (see `applyChange()`).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get isOpen(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "isOpen",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!Transaction#startingView:member",
              "docComment": "/**\n * The view of the tree when this transaction was created\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly startingView: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "startingView",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!Transaction#status:member",
              "docComment": "/**\n * The status of the most recently applied change in this transaction\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get status(): "
                },
                {
                  "kind": "Reference",
                  "text": "EditStatus",
                  "canonicalReference": "@fluid-experimental/tree!EditStatus:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!Transaction#tree:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly tree: "
                },
                {
                  "kind": "Reference",
                  "text": "SharedTree",
                  "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "tree",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluid-experimental/tree!TransactionEvent:enum",
          "docComment": "/**\n * An event emitted by a `Transaction` to indicate a state change. See {@link TransactionEvents} for event argument information.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum TransactionEvent "
            }
          ],
          "releaseTag": "Public",
          "name": "TransactionEvent",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!TransactionEvent.ViewChange:member",
              "docComment": "/**\n * `currentView` has changed from `before` to `after`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ViewChange = "
                },
                {
                  "kind": "Content",
                  "text": "\"viewChange\""
                }
              ],
              "releaseTag": "Public",
              "name": "ViewChange",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!TransactionEvents:interface",
          "docComment": "/**\n * Events which may be emitted by `Transaction`\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TransactionEvents extends "
            },
            {
              "kind": "Reference",
              "text": "IErrorEvent",
              "canonicalReference": "@fluidframework/common-definitions!IErrorEvent:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TransactionEvents",
          "members": [
            {
              "kind": "CallSignature",
              "canonicalReference": "@fluid-experimental/tree!TransactionEvents:call(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionEvent.ViewChange",
                  "canonicalReference": "@fluid-experimental/tree!TransactionEvent.ViewChange:member"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(before: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": ", after: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 8
                  },
                  "isOptional": false
                }
              ]
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!TransactionFailure:interface",
          "docComment": "/**\n * The failure state of a transaction.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TransactionFailure "
            }
          ],
          "releaseTag": "Public",
          "name": "TransactionFailure",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TransactionFailure#failure:member",
              "docComment": "/**\n * Information about what caused the transaction to fail.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly failure: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionInternal.Failure",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.Failure:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "failure",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TransactionFailure#status:member",
              "docComment": "/**\n * The status indicating the kind of failure encountered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly status: "
                },
                {
                  "kind": "Reference",
                  "text": "EditStatus.Invalid",
                  "canonicalReference": "@fluid-experimental/tree!EditStatus.Invalid:member"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "EditStatus.Malformed",
                  "canonicalReference": "@fluid-experimental/tree!EditStatus.Malformed:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@fluid-experimental/tree!TransactionInternal:namespace",
          "docComment": "/**\n * A mutable transaction for applying sequences of changes to a TreeView. Allows viewing the intermediate states.\n *\n * Contains necessary state to apply changes within an edit to a TreeView.\n *\n * May have any number of changes applied to make up the edit. Use `close` to complete the transaction, returning the array of changes and an EditingResult showing the results of applying the changes as an Edit to the initial TreeView (passed to the constructor).\n *\n * No data outside the Transaction is modified by Transaction: the results from `close` must be used to actually submit an `Edit`.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare namespace TransactionInternal "
            }
          ],
          "releaseTag": "Public",
          "name": "TransactionInternal",
          "members": [
            {
              "kind": "Interface",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.BadPlaceFailure:interface",
              "docComment": "/**\n * Error thrown when an insert change uses an invalid Place\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface BadPlaceFailure "
                }
              ],
              "releaseTag": "Public",
              "name": "BadPlaceFailure",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.BadPlaceFailure#change:member",
                  "docComment": "/**\n * Faulting Change\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly change: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ChangeInternal",
                      "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "change",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.BadPlaceFailure#kind:member",
                  "docComment": "/**\n * Failure kind (will always be FailureKind.BadPlace)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly kind: "
                    },
                    {
                      "kind": "Reference",
                      "text": "FailureKind.BadPlace",
                      "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.BadPlace:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "kind",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.BadPlaceFailure#place:member",
                  "docComment": "/**\n * The faulting place\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly place: "
                    },
                    {
                      "kind": "Reference",
                      "text": "StablePlaceInternal",
                      "canonicalReference": "@fluid-experimental/tree!StablePlaceInternal:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "place",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.BadPlaceFailure#placeFailure:member",
                  "docComment": "/**\n * The reason for the failure\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly placeFailure: "
                    },
                    {
                      "kind": "Reference",
                      "text": "BadPlaceValidationResult",
                      "canonicalReference": "@fluid-experimental/tree!BadPlaceValidationResult:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "placeFailure",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.BadRangeFailure:interface",
              "docComment": "/**\n * Error thrown when a detach operation is given an invalid or malformed Range\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface BadRangeFailure "
                }
              ],
              "releaseTag": "Public",
              "name": "BadRangeFailure",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.BadRangeFailure#change:member",
                  "docComment": "/**\n * Faulting Change\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly change: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ChangeInternal",
                      "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "change",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.BadRangeFailure#kind:member",
                  "docComment": "/**\n * Failure kind (will always be FailureKind.BadRange)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly kind: "
                    },
                    {
                      "kind": "Reference",
                      "text": "FailureKind.BadRange",
                      "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.BadRange:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "kind",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.BadRangeFailure#range:member",
                  "docComment": "/**\n * Faulting range\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly range: "
                    },
                    {
                      "kind": "Reference",
                      "text": "StableRangeInternal",
                      "canonicalReference": "@fluid-experimental/tree!StableRangeInternal:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "range",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.BadRangeFailure#rangeFailure:member",
                  "docComment": "/**\n * The reason for the failure\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly rangeFailure: "
                    },
                    {
                      "kind": "Reference",
                      "text": "BadRangeValidationResult",
                      "canonicalReference": "@fluid-experimental/tree!BadRangeValidationResult:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "rangeFailure",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationFailure:interface",
              "docComment": "/**\n * Error thrown when a constraint fails to apply\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface ConstraintViolationFailure "
                }
              ],
              "releaseTag": "Public",
              "name": "ConstraintViolationFailure",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationFailure#constraint:member",
                  "docComment": "/**\n * Faulting Change\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly constraint: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ConstraintInternal",
                      "canonicalReference": "@fluid-experimental/tree!ConstraintInternal:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "constraint",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationFailure#kind:member",
                  "docComment": "/**\n * Failure kind (will always be FailureKind.ConstraintViolation)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly kind: "
                    },
                    {
                      "kind": "Reference",
                      "text": "FailureKind.ConstraintViolation",
                      "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.ConstraintViolation:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "kind",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationFailure#violation:member",
                  "docComment": "/**\n * The first violation the constraint encounters (there may be others).\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly violation: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ConstraintViolationResult",
                      "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationResult:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "violation",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Enum",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationKind:enum",
              "docComment": "/**\n * Enum of possible kinds of constraint violations that can be encountered\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export enum ConstraintViolationKind "
                }
              ],
              "releaseTag": "Public",
              "name": "ConstraintViolationKind",
              "members": [
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationKind.BadLabel:member",
                  "docComment": "/**\n * The constraint failed because the trait label prescribed by the constraint does not match the actual trait label of the range being constrained\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "BadLabel = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"BadLabel\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "BadLabel",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationKind.BadLength:member",
                  "docComment": "/**\n * The constraint failed because the length prescribed by the constraint does not match the length of range being constrained\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "BadLength = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"BadLength\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "BadLength",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationKind.BadParent:member",
                  "docComment": "/**\n * The constraint failed because the parent prescribed by the constraint does not match the actual parent of the range being constrained\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "BadParent = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"BadParent\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "BadParent",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationKind.BadRange:member",
                  "docComment": "/**\n * The constraint failed because it applies to an invalid range\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "BadRange = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"BadRange\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "BadRange",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationResult:type",
              "docComment": "/**\n * The details of what kind of constraint was violated and caused a ConstraintViolationFailure error to occur\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export type ConstraintViolationResult = "
                },
                {
                  "kind": "Content",
                  "text": "{\n        readonly kind: "
                },
                {
                  "kind": "Reference",
                  "text": "ConstraintViolationKind.BadRange",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationKind.BadRange:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        readonly rangeFailure: "
                },
                {
                  "kind": "Reference",
                  "text": "BadRangeValidationResult",
                  "canonicalReference": "@fluid-experimental/tree!BadRangeValidationResult:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    } | {\n        readonly kind: "
                },
                {
                  "kind": "Reference",
                  "text": "ConstraintViolationKind.BadLength",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationKind.BadLength:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        readonly actual: number;\n    } | {\n        readonly kind: "
                },
                {
                  "kind": "Reference",
                  "text": "ConstraintViolationKind.BadParent",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationKind.BadParent:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        readonly actual: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    } | {\n        readonly kind: "
                },
                {
                  "kind": "Reference",
                  "text": "ConstraintViolationKind.BadLabel",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationKind.BadLabel:member"
                },
                {
                  "kind": "Content",
                  "text": ";\n        readonly actual: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLabel",
                  "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ConstraintViolationResult",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 16
              }
            },
            {
              "kind": "Interface",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DetachedSequenceIdAlreadyInUseFailure:interface",
              "docComment": "/**\n * Error thrown when a transaction encounters a build operation using an already in use DetachedSequenceID.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface DetachedSequenceIdAlreadyInUseFailure "
                }
              ],
              "releaseTag": "Public",
              "name": "DetachedSequenceIdAlreadyInUseFailure",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DetachedSequenceIdAlreadyInUseFailure#change:member",
                  "docComment": "/**\n * Faulting Change\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly change: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ChangeInternal",
                      "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "change",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DetachedSequenceIdAlreadyInUseFailure#kind:member",
                  "docComment": "/**\n * Failure kind (will always be FailureKind.DetachedSequenceIdAlreadyInUse)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly kind: "
                    },
                    {
                      "kind": "Reference",
                      "text": "FailureKind.DetachedSequenceIdAlreadyInUse",
                      "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.DetachedSequenceIdAlreadyInUse:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "kind",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DetachedSequenceIdAlreadyInUseFailure#sequenceId:member",
                  "docComment": "/**\n * The DetachedSequenceId that is already in use\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly sequenceId: "
                    },
                    {
                      "kind": "Reference",
                      "text": "DetachedSequenceId",
                      "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "sequenceId",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DetachedSequenceNotFoundFailure:interface",
              "docComment": "/**\n * Error thrown when a transaction tries to operate on an unknown DetachedSequenceID\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface DetachedSequenceNotFoundFailure "
                }
              ],
              "releaseTag": "Public",
              "name": "DetachedSequenceNotFoundFailure",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DetachedSequenceNotFoundFailure#change:member",
                  "docComment": "/**\n * Faulting Change\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly change: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ChangeInternal",
                      "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "change",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DetachedSequenceNotFoundFailure#kind:member",
                  "docComment": "/**\n * Failure kind (will always be FailureKind.DetachedSequenceNotFound)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly kind: "
                    },
                    {
                      "kind": "Reference",
                      "text": "FailureKind.DetachedSequenceNotFound",
                      "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.DetachedSequenceNotFound:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "kind",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DetachedSequenceNotFoundFailure#sequenceId:member",
                  "docComment": "/**\n * The DetachedSequenceId that wasn't found\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly sequenceId: "
                    },
                    {
                      "kind": "Reference",
                      "text": "DetachedSequenceId",
                      "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "sequenceId",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DuplicateIdInBuildFailure:interface",
              "docComment": "/**\n * Error thrown when a build uses a duplicated NodeId\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface DuplicateIdInBuildFailure "
                }
              ],
              "releaseTag": "Public",
              "name": "DuplicateIdInBuildFailure",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DuplicateIdInBuildFailure#change:member",
                  "docComment": "/**\n * Faulting Change\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly change: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ChangeInternal",
                      "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "change",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DuplicateIdInBuildFailure#id:member",
                  "docComment": "/**\n * ID of duplicated node\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly id: "
                    },
                    {
                      "kind": "Reference",
                      "text": "NodeId",
                      "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "id",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DuplicateIdInBuildFailure#kind:member",
                  "docComment": "/**\n * Failure kind (will always be FailureKind.DuplicateIdInBuild)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly kind: "
                    },
                    {
                      "kind": "Reference",
                      "text": "FailureKind.DuplicateIdInBuild",
                      "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.DuplicateIdInBuild:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "kind",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Function",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.factory:function(1)",
              "docComment": "/**\n * Makes a new {@link GenericTransaction} that follows the {@link TransactionInternal.Policy} policy.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export function factory(view: "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "GenericTransaction",
                  "canonicalReference": "@fluid-experimental/tree!GenericTransaction:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "view",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "factory"
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.Failure:type",
              "docComment": "/**\n * A failure encountered by a transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export type Failure = "
                },
                {
                  "kind": "Reference",
                  "text": "UnusedDetachedSequenceFailure",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.UnusedDetachedSequenceFailure:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "DetachedSequenceIdAlreadyInUseFailure",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DetachedSequenceIdAlreadyInUseFailure:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "DetachedSequenceNotFoundFailure",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DetachedSequenceNotFoundFailure:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "DuplicateIdInBuildFailure",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.DuplicateIdInBuildFailure:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "IdAlreadyInUseFailure",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.IdAlreadyInUseFailure:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "UnknownIdFailure",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.UnknownIdFailure:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "BadPlaceFailure",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.BadPlaceFailure:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "BadRangeFailure",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.BadRangeFailure:interface"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "ConstraintViolationFailure",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ConstraintViolationFailure:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "Failure",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 18
              }
            },
            {
              "kind": "Enum",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind:enum",
              "docComment": "/**\n * The kinds of failures that a transaction might encounter.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export enum FailureKind "
                }
              ],
              "releaseTag": "Public",
              "name": "FailureKind",
              "members": [
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.BadPlace:member",
                  "docComment": "/**\n * Transaction tries to insert in an invalid Place\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "BadPlace = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"BadPlace\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "BadPlace",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.BadRange:member",
                  "docComment": "/**\n * Transaction tries to detach an invalid Range\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "BadRange = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"BadRange\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "BadRange",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.ConstraintViolation:member",
                  "docComment": "/**\n * Transaction has an invalid constraint\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "ConstraintViolation = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"ConstraintViolation\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "ConstraintViolation",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.DetachedSequenceIdAlreadyInUse:member",
                  "docComment": "/**\n * Transaction has a build operation using an already in use DetachedSequenceID.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "DetachedSequenceIdAlreadyInUse = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"DetachedSequenceIdAlreadyInUse\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "DetachedSequenceIdAlreadyInUse",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.DetachedSequenceNotFound:member",
                  "docComment": "/**\n * Transaction tries to operate on an unknown DetachedSequenceID\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "DetachedSequenceNotFound = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"DetachedSequenceNotFound\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "DetachedSequenceNotFound",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.DuplicateIdInBuild:member",
                  "docComment": "/**\n * Transaction has a build which uses a duplicated NodeId\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "DuplicateIdInBuild = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"DuplicateIdInBuild\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "DuplicateIdInBuild",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.IdAlreadyInUse:member",
                  "docComment": "/**\n * Transaction tries to build a node using an ID which is already used in the current state\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "IdAlreadyInUse = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"IdAlreadyInUse\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "IdAlreadyInUse",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.UnknownId:member",
                  "docComment": "/**\n * Transaction tries to set value of an unknown node\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "UnknownId = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"UnknownId\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "UnknownId",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "EnumMember",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.UnusedDetachedSequence:member",
                  "docComment": "/**\n * Transaction has an unused DetachedSequenceId\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "UnusedDetachedSequence = "
                    },
                    {
                      "kind": "Content",
                      "text": "\"UnusedDetachedSequence\""
                    }
                  ],
                  "releaseTag": "Public",
                  "name": "UnusedDetachedSequence",
                  "initializerTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.IdAlreadyInUseFailure:interface",
              "docComment": "/**\n * Error thrown when a build node ID is already used in the current state\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface IdAlreadyInUseFailure "
                }
              ],
              "releaseTag": "Public",
              "name": "IdAlreadyInUseFailure",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.IdAlreadyInUseFailure#change:member",
                  "docComment": "/**\n * Faulting Change\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly change: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ChangeInternal",
                      "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "change",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.IdAlreadyInUseFailure#id:member",
                  "docComment": "/**\n * ID of already in use node\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly id: "
                    },
                    {
                      "kind": "Reference",
                      "text": "NodeId",
                      "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "id",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.IdAlreadyInUseFailure#kind:member",
                  "docComment": "/**\n * Failure kind (will always be FailureKind.IdAlreadyInUse)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly kind: "
                    },
                    {
                      "kind": "Reference",
                      "text": "FailureKind.IdAlreadyInUse",
                      "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.IdAlreadyInUse:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "kind",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.Policy:class",
              "docComment": "/**\n * The policy followed by a {@link TransactionInternal}.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export class Policy implements "
                },
                {
                  "kind": "Reference",
                  "text": "GenericTransactionPolicy",
                  "canonicalReference": "@fluid-experimental/tree!GenericTransactionPolicy:interface"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "releaseTag": "Public",
              "name": "Policy",
              "members": [
                {
                  "kind": "Method",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.Policy#createViewNodesForTree:member(1)",
                  "docComment": "/**\n * Generates tree view nodes from the supplied edit nodes. Invokes onCreateNode for each new node, and halts creation early if it returns true. Invokes onInvalidDetachedId and halts early for any invalid detached IDs referenced in the edit node sequence.\n *\n * @returns all the top-level node IDs in `sequence` (both from nodes and from detached sequences).\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "protected createViewNodesForTree(sequence: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Iterable",
                      "canonicalReference": "!Iterable:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "<"
                    },
                    {
                      "kind": "Reference",
                      "text": "BuildNodeInternal",
                      "canonicalReference": "@fluid-experimental/tree!BuildNodeInternal:type"
                    },
                    {
                      "kind": "Content",
                      "text": ">"
                    },
                    {
                      "kind": "Content",
                      "text": ", onCreateNode: "
                    },
                    {
                      "kind": "Content",
                      "text": "(stableId: "
                    },
                    {
                      "kind": "Reference",
                      "text": "NodeId",
                      "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                    },
                    {
                      "kind": "Content",
                      "text": ", node: "
                    },
                    {
                      "kind": "Reference",
                      "text": "TreeViewNode",
                      "canonicalReference": "@fluid-experimental/tree!TreeViewNode:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ") => boolean"
                    },
                    {
                      "kind": "Content",
                      "text": ", onInvalidDetachedId: "
                    },
                    {
                      "kind": "Content",
                      "text": "(sequenceId: "
                    },
                    {
                      "kind": "Reference",
                      "text": "DetachedSequenceId",
                      "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type"
                    },
                    {
                      "kind": "Content",
                      "text": ") => void"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "NodeId",
                      "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                    },
                    {
                      "kind": "Content",
                      "text": "[] | undefined"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 16,
                    "endIndex": 18
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "sequence",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 5
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "onCreateNode",
                      "parameterTypeTokenRange": {
                        "startIndex": 6,
                        "endIndex": 11
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "onInvalidDetachedId",
                      "parameterTypeTokenRange": {
                        "startIndex": 12,
                        "endIndex": 15
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "createViewNodesForTree"
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.Policy#detached:member",
                  "docComment": "/**\n * Maps detached sequences of nodes to their NodeIds\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "protected readonly detached: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Map",
                      "canonicalReference": "!Map:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "<"
                    },
                    {
                      "kind": "Reference",
                      "text": "DetachedSequenceId",
                      "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type"
                    },
                    {
                      "kind": "Content",
                      "text": ", readonly "
                    },
                    {
                      "kind": "Reference",
                      "text": "NodeId",
                      "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                    },
                    {
                      "kind": "Content",
                      "text": "[]>"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "detached",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 7
                  },
                  "isStatic": false
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.Policy#dispatchChange:member(1)",
                  "docComment": "/**\n * Applies a given change\n *\n * @param state - Current state\n *\n * @param change - Change to apply\n *\n * @returns a {@link ChangeResult} containing either the change result or a Failure\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "dispatchChange(state: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ValidState",
                      "canonicalReference": "@fluid-experimental/tree!~ValidState:type"
                    },
                    {
                      "kind": "Content",
                      "text": ", change: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ChangeInternal",
                      "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "ChangeResult",
                      "canonicalReference": "@fluid-experimental/tree!ChangeResult:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "state",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "change",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 4
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "dispatchChange"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.Policy#tryResolveChange:member(1)",
                  "docComment": "/**\n * Resolves change with Result.Ok\n *\n * @param state - Unused\n *\n * @param change - Change to resolve\n *\n * @returns Result.Ok which contains change\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "tryResolveChange(state: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ValidState",
                      "canonicalReference": "@fluid-experimental/tree!~ValidState:type"
                    },
                    {
                      "kind": "Content",
                      "text": ", change: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ChangeInternal",
                      "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "Result.Ok",
                      "canonicalReference": "@fluid-experimental/tree!Result.Ok:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "<"
                    },
                    {
                      "kind": "Reference",
                      "text": "ChangeInternal",
                      "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                    },
                    {
                      "kind": "Content",
                      "text": ">"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 9
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "state",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "change",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 4
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "tryResolveChange"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.Policy#validateOnClose:member(1)",
                  "docComment": "/**\n * Validates the transaction when it is closed\n *\n * @param state - Current state\n *\n * @returns a {@link ChangeResult} containing either the change result or a Failure\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "validateOnClose(state: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ValidState",
                      "canonicalReference": "@fluid-experimental/tree!~ValidState:type"
                    },
                    {
                      "kind": "Content",
                      "text": "): "
                    },
                    {
                      "kind": "Reference",
                      "text": "ChangeResult",
                      "canonicalReference": "@fluid-experimental/tree!ChangeResult:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "releaseTag": "Public",
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "state",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ],
                  "name": "validateOnClose"
                }
              ],
              "implementsTokenRanges": [
                {
                  "startIndex": 1,
                  "endIndex": 2
                }
              ]
            },
            {
              "kind": "Interface",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.UnknownIdFailure:interface",
              "docComment": "/**\n * Error thrown when a change is attempted on an unknown NodeId\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface UnknownIdFailure "
                }
              ],
              "releaseTag": "Public",
              "name": "UnknownIdFailure",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.UnknownIdFailure#change:member",
                  "docComment": "/**\n * Faulting Change\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly change: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ChangeInternal",
                      "canonicalReference": "@fluid-experimental/tree!ChangeInternal:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "change",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.UnknownIdFailure#id:member",
                  "docComment": "/**\n * The unknown ID\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly id: "
                    },
                    {
                      "kind": "Reference",
                      "text": "NodeId",
                      "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "id",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.UnknownIdFailure#kind:member",
                  "docComment": "/**\n * Failure kind (will always be FailureKind.UnknownId)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly kind: "
                    },
                    {
                      "kind": "Reference",
                      "text": "FailureKind.UnknownId",
                      "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.UnknownId:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "kind",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.UnusedDetachedSequenceFailure:interface",
              "docComment": "/**\n * Error returned when a transaction is closed while there is an unused detached sequence.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface UnusedDetachedSequenceFailure "
                }
              ],
              "releaseTag": "Public",
              "name": "UnusedDetachedSequenceFailure",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.UnusedDetachedSequenceFailure#kind:member",
                  "docComment": "/**\n * Failure kind (will always be FailureKind.UnusedDetachedSequence)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly kind: "
                    },
                    {
                      "kind": "Reference",
                      "text": "FailureKind.UnusedDetachedSequence",
                      "canonicalReference": "@fluid-experimental/tree!TransactionInternal.FailureKind.UnusedDetachedSequence:member"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "kind",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@fluid-experimental/tree!TransactionInternal.UnusedDetachedSequenceFailure#sequenceId:member",
                  "docComment": "/**\n * The unused DetachedSequenceId\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly sequenceId: "
                    },
                    {
                      "kind": "Reference",
                      "text": "DetachedSequenceId",
                      "canonicalReference": "@fluid-experimental/tree!DetachedSequenceId:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "sequenceId",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "TypeAlias",
              "canonicalReference": "@fluid-experimental/tree!TransactionInternal.ValidState:type",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type ValidState = "
                },
                {
                  "kind": "Reference",
                  "text": "SucceedingTransactionState",
                  "canonicalReference": "@fluid-experimental/tree!SucceedingTransactionState:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "ValidState",
              "typeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!TransactionState:type",
          "docComment": "/**\n * The ongoing state of a transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TransactionState = "
            },
            {
              "kind": "Reference",
              "text": "SucceedingTransactionState",
              "canonicalReference": "@fluid-experimental/tree!SucceedingTransactionState:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "FailingTransactionState",
              "canonicalReference": "@fluid-experimental/tree!FailingTransactionState:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TransactionState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-experimental/tree!TransactionView:class",
          "docComment": "/**\n * An view of a distributed tree that is part of an ongoing transaction between `RevisionView`s.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TransactionView extends "
            },
            {
              "kind": "Reference",
              "text": "TreeView",
              "canonicalReference": "@fluid-experimental/tree!TreeView:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TransactionView",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TransactionView#addNodes:member(1)",
              "docComment": "/**\n * Inserts all nodes in a NodeSequence into the view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "addNodes(sequence: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TreeViewNode",
                  "canonicalReference": "@fluid-experimental/tree!TreeViewNode:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionView",
                  "canonicalReference": "@fluid-experimental/tree!TransactionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sequence",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "name": "addNodes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TransactionView#attachRange:member(1)",
              "docComment": "/**\n * Parents a set of detached nodes at a specified place.\n *\n * @param nodesToAttach - the nodes to parent in the specified place. The nodes must already be present in the view.\n *\n * @param place - the location to insert the nodes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "attachRange(nodesToAttach: "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ", place: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeViewPlace",
                  "canonicalReference": "@fluid-experimental/tree!TreeViewPlace:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionView",
                  "canonicalReference": "@fluid-experimental/tree!TransactionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nodesToAttach",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "place",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ],
              "name": "attachRange"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TransactionView#close:member(1)",
              "docComment": "/**\n * Conclude a transaction by generating an immutable `RevisionView` from this view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(): "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TransactionView#deleteNodes:member(1)",
              "docComment": "/**\n * Remove all nodes with the given ids from the view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "deleteNodes(nodes: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionView",
                  "canonicalReference": "@fluid-experimental/tree!TransactionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nodes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 5
                  },
                  "isOptional": false
                }
              ],
              "name": "deleteNodes"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TransactionView#detachRange:member(1)",
              "docComment": "/**\n * Detaches a range of nodes from their parent. The detached nodes remain in the view.\n *\n * @param rangeToDetach - the range of nodes to detach\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "detachRange(rangeToDetach: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeViewRange",
                  "canonicalReference": "@fluid-experimental/tree!TreeViewRange:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        view: "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionView",
                  "canonicalReference": "@fluid-experimental/tree!TransactionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n        detached: readonly "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "[];\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "rangeToDetach",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "detachRange"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TransactionView#equals:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equals(view: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "view",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TransactionView#setNodeValue:member(1)",
              "docComment": "/**\n * Sets or overwrites a node's value. The node must exist in this view.\n *\n * @param nodeId - the id of the node\n *\n * @param value - the new value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setNodeValue(nodeId: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Reference",
                  "text": "Payload",
                  "canonicalReference": "@fluid-experimental/tree!Payload:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TransactionView",
                  "canonicalReference": "@fluid-experimental/tree!TransactionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "nodeId",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "setNodeValue"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!TreeNode:interface",
          "docComment": "/**\n * Satisfies `NodeData` and may contain children under traits (which may or may not be `TreeNodes`)\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TreeNode<TChild, TId> extends "
            },
            {
              "kind": "Reference",
              "text": "NodeData",
              "canonicalReference": "@fluid-experimental/tree!NodeData:interface"
            },
            {
              "kind": "Content",
              "text": "<TId>"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "HasTraits",
              "canonicalReference": "@fluid-experimental/tree!HasTraits:interface"
            },
            {
              "kind": "Content",
              "text": "<TChild> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "TChild",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "TId",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "TreeNode",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            },
            {
              "startIndex": 4,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-experimental/tree!TreeNodeHandle:class",
          "docComment": "/**\n * A handle to a `TreeNode` that exists within a specific `TreeView`. This type provides a convenient API for traversing trees of nodes in a TreeView and is not designed to provide maximum runtime performance; if performance is a concern, consider using the TreeView and TreeViewNode APIs directly.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TreeNodeHandle implements "
            },
            {
              "kind": "Reference",
              "text": "TreeNode",
              "canonicalReference": "@fluid-experimental/tree!TreeNode:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "TreeNodeHandle",
              "canonicalReference": "@fluid-experimental/tree!TreeNodeHandle:class"
            },
            {
              "kind": "Content",
              "text": ", "
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "TreeNodeHandle",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluid-experimental/tree!TreeNodeHandle:constructor(1)",
              "docComment": "/**\n * Construct a handle which references the node with the given id in the given `TreeView`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(view: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": ", nodeId: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "view",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "nodeId",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!TreeNodeHandle#definition:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get definition(): "
                },
                {
                  "kind": "Reference",
                  "text": "Definition",
                  "canonicalReference": "@fluid-experimental/tree!Definition:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "definition",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!TreeNodeHandle#identifier:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get identifier(): "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "identifier",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!TreeNodeHandle#node:member",
              "docComment": "/**\n * Get a `TreeViewNode` for the tree view node that this handle references\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get node(): "
                },
                {
                  "kind": "Reference",
                  "text": "TreeViewNode",
                  "canonicalReference": "@fluid-experimental/tree!TreeViewNode:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "node",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!TreeNodeHandle#payload:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get payload(): "
                },
                {
                  "kind": "Reference",
                  "text": "Payload",
                  "canonicalReference": "@fluid-experimental/tree!Payload:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "payload",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!TreeNodeHandle#traits:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get traits(): "
                },
                {
                  "kind": "Reference",
                  "text": "TraitMap",
                  "canonicalReference": "@fluid-experimental/tree!TraitMap:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TreeNodeHandle",
                  "canonicalReference": "@fluid-experimental/tree!TreeNodeHandle:class"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "traits",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!TreeNodeSequence:type",
          "docComment": "/**\n * A sequence of Nodes that make up a trait under a Node\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TreeNodeSequence<TChild> = "
            },
            {
              "kind": "Content",
              "text": "readonly TChild[]"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TreeNodeSequence",
          "typeParameters": [
            {
              "typeParameterName": "TChild",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-experimental/tree!TreeView:class",
          "docComment": "/**\n * A view of a distributed tree.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class TreeView "
            }
          ],
          "releaseTag": "Public",
          "name": "TreeView",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#[Symbol.iterator]:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "Symbol.iterator",
                  "canonicalReference": "!SymbolConstructor#iterator"
                },
                {
                  "kind": "Content",
                  "text": "](): "
                },
                {
                  "kind": "Reference",
                  "text": "IterableIterator",
                  "canonicalReference": "!IterableIterator:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TreeViewNode",
                  "canonicalReference": "@fluid-experimental/tree!TreeViewNode:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "[Symbol.iterator]"
            },
            {
              "kind": "Constructor",
              "canonicalReference": "@fluid-experimental/tree!TreeView:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `TreeView` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected constructor(root: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ", forest: "
                },
                {
                  "kind": "Reference",
                  "text": "Forest",
                  "canonicalReference": "@fluid-experimental/tree!Forest:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "root",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "forest",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#assertConsistent:member(1)",
              "docComment": "/**\n * Asserts that the view's internal state is consistent. Useful for testing/validation.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "assertConsistent(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "assertConsistent"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#delta:member(1)",
              "docComment": "/**\n * Calculate the difference between two `TreeView`s\n *\n * @param view - the other view to compare to this one\n *\n * @returns A {@link Delta} which nodes must be changed, added, and removed to get from `this` to `view`. The views must share a root.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delta(view: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Delta",
                  "canonicalReference": "@fluid-experimental/tree!Delta:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "view",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "delta"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#equals:member(1)",
              "docComment": "/**\n * @returns true iff the given view is equal to this view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "abstract equals(view: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "view",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "equals"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#findIndexWithinTrait:member(1)",
              "docComment": "/**\n * @returns the index just after place (which specifies a location between items). Performance note: this is O(siblings in trait).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "findIndexWithinTrait(place: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeViewPlace",
                  "canonicalReference": "@fluid-experimental/tree!TreeViewPlace:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "PlaceIndex",
                  "canonicalReference": "@fluid-experimental/tree!PlaceIndex:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "place",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "findIndexWithinTrait"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!TreeView#forest:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected readonly forest: "
                },
                {
                  "kind": "Reference",
                  "text": "Forest",
                  "canonicalReference": "@fluid-experimental/tree!Forest:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "forest",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#getIndexInTrait:member(1)",
              "docComment": "/**\n * @returns the index within the trait under which the node with the given id resides. The node must exist in this view and must have a parent. Performance note: this is O(siblings in trait).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getIndexInTrait(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TraitNodeIndex",
                  "canonicalReference": "@fluid-experimental/tree!TraitNodeIndex:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getIndexInTrait"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#getParentViewNode:member(1)",
              "docComment": "/**\n * @returns the parent of the node with the given id. Fails if the node does not exist in this view or if it is the root node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getParentViewNode(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TreeViewNode",
                  "canonicalReference": "@fluid-experimental/tree!TreeViewNode:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getParentViewNode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#getTrait:member(1)",
              "docComment": "/**\n * @returns the trait at the given location. If no such trait exists, returns an empty trait.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTrait(traitLocation: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLocation",
                  "canonicalReference": "@fluid-experimental/tree!TraitLocation:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "traitLocation",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getTrait"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#getTraitLabel:member(1)",
              "docComment": "/**\n * @returns the label of the trait under which a node with the given id resides. Fails if the node does not exist in this view or if it is the root node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTraitLabel(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLabel",
                  "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getTraitLabel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#getTraitLocation:member(1)",
              "docComment": "/**\n * @returns the trait location of the node with the given id. Fails if the node does not exist in this view or of it is the root node\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getTraitLocation(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLocation",
                  "canonicalReference": "@fluid-experimental/tree!TraitLocation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getTraitLocation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#getViewNode:member(1)",
              "docComment": "/**\n * @returns the node associated with the given id in this view. Fails if the node does not exist in this view.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getViewNode(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TreeViewNode",
                  "canonicalReference": "@fluid-experimental/tree!TreeViewNode:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getViewNode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#hasEqualForest:member(1)",
              "docComment": "/**\n * @param strict - if true, the views' forests must be the same object, otherwise they must merely be equivalent\n *\n * @returns true iff the given view's forest of nodes is equivalent to this view's forest of nodes\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasEqualForest(view: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeView",
                  "canonicalReference": "@fluid-experimental/tree!TreeView:class"
                },
                {
                  "kind": "Content",
                  "text": ", strict?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "view",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "strict",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "hasEqualForest"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#hasNode:member(1)",
              "docComment": "/**\n * @returns true iff a node with the given id exists in this view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "hasNode(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "hasNode"
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!TreeView#root:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly root: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "root",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "@fluid-experimental/tree!TreeView#size:member",
              "docComment": "/**\n * @returns the number of nodes in this view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get size(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "size",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#tryGetIndexInTrait:member(1)",
              "docComment": "/**\n * @returns the index within the trait under which the node with the given id resides, or undefined if the node does not exist in this view or does not have a parent. Performance note: this is O(siblings in trait).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryGetIndexInTrait(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TraitNodeIndex",
                  "canonicalReference": "@fluid-experimental/tree!TraitNodeIndex:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "tryGetIndexInTrait"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#tryGetParentViewNode:member(1)",
              "docComment": "/**\n * @returns the parent of the node with the given id. Returns undefined if the node does not exist in this view or if it is the root node.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryGetParentViewNode(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TreeViewNode",
                  "canonicalReference": "@fluid-experimental/tree!TreeViewNode:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "tryGetParentViewNode"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#tryGetTraitLabel:member(1)",
              "docComment": "/**\n * @returns the label of the trait under which a node with the given id resides, or undefined if the node is not present in this view or if it is the root node\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryGetTraitLabel(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLabel",
                  "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "tryGetTraitLabel"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#tryGetTraitLocation:member(1)",
              "docComment": "/**\n * @returns the trait location of the node with the given id, or undefined if the node does not exist in this view or if it is the root node\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryGetTraitLocation(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLocation",
                  "canonicalReference": "@fluid-experimental/tree!TraitLocation:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "tryGetTraitLocation"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-experimental/tree!TreeView#tryGetViewNode:member(1)",
              "docComment": "/**\n * @returns the node associated with the given id in this view, or undefined if the node does not exist in this view\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tryGetViewNode(id: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "TreeViewNode",
                  "canonicalReference": "@fluid-experimental/tree!TreeViewNode:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "tryGetViewNode"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!TreeViewNode:interface",
          "docComment": "/**\n * An immutable view of a distributed tree node.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TreeViewNode extends "
            },
            {
              "kind": "Reference",
              "text": "NodeData",
              "canonicalReference": "@fluid-experimental/tree!NodeData:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "NodeId",
              "canonicalReference": "@fluid-experimental/tree!NodeId:type"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "TreeViewNode",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TreeViewNode#parentage:member",
              "docComment": "/**\n * The parent and trait under which this node resides. Undefined iff this is the root node of the tree (i.e. {@link initialTree}).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly parentage?: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLocation",
                  "canonicalReference": "@fluid-experimental/tree!TraitLocation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "parentage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TreeViewNode#traits:member",
              "docComment": "/**\n * The IDs of the children under this node\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly traits: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMap",
                  "canonicalReference": "!ReadonlyMap:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TraitLabel",
                  "canonicalReference": "@fluid-experimental/tree!TraitLabel:type"
                },
                {
                  "kind": "Content",
                  "text": ", readonly "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": "[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "traits",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!TreeViewPlace:interface",
          "docComment": "/**\n * A place within a particular `TreeView` that is anchored relative to a specific node in the tree, or relative to the outside of the trait. Valid iff 'trait' is valid and, if provided, sibling is in the Location specified by 'trait'.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TreeViewPlace "
            }
          ],
          "releaseTag": "Public",
          "name": "TreeViewPlace",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TreeViewPlace#sibling:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly sibling?: "
                },
                {
                  "kind": "Reference",
                  "text": "NodeId",
                  "canonicalReference": "@fluid-experimental/tree!NodeId:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "sibling",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TreeViewPlace#side:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly side: "
                },
                {
                  "kind": "Reference",
                  "text": "Side",
                  "canonicalReference": "@fluid-experimental/tree!Side:enum"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "side",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TreeViewPlace#trait:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly trait: "
                },
                {
                  "kind": "Reference",
                  "text": "TraitLocation",
                  "canonicalReference": "@fluid-experimental/tree!TraitLocation:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "trait",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!TreeViewRange:interface",
          "docComment": "/**\n * Specifies the range of nodes from `start` to `end` within a trait within a particular `TreeView`. Valid iff start and end are valid and are within the same trait.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TreeViewRange "
            }
          ],
          "releaseTag": "Public",
          "name": "TreeViewRange",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TreeViewRange#end:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly end: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeViewPlace",
                  "canonicalReference": "@fluid-experimental/tree!TreeViewPlace:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "end",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!TreeViewRange#start:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly start: "
                },
                {
                  "kind": "Reference",
                  "text": "TreeViewPlace",
                  "canonicalReference": "@fluid-experimental/tree!TreeViewPlace:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "start",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "@fluid-experimental/tree!useFailedSequencedEditTelemetry:function(1)",
          "docComment": "/**\n * Logs generic telemetry for failed sequenced edits. Only failing edits that were originally made locally are logged.\n *\n * @param tree - The tree for which to log the telemetry.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function useFailedSequencedEditTelemetry(tree: "
            },
            {
              "kind": "Reference",
              "text": "SharedTree",
              "canonicalReference": "@fluid-experimental/tree!SharedTree:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "{\n    disable: () => void;\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "tree",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isOptional": false
            }
          ],
          "name": "useFailedSequencedEditTelemetry"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@fluid-experimental/tree!UuidString:type",
          "docComment": "/**\n * A 128-bit Universally Unique IDentifier. Represented here with a string of the form xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx, where x is a lowercase hex digit.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type UuidString = "
            },
            {
              "kind": "Content",
              "text": "string & {\n    readonly UuidString: '9d40d0ae-90d9-44b1-9482-9f55d59d5465';\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "UuidString",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-experimental/tree!ValidEditingResult:interface",
          "docComment": "/**\n * Result of applying a valid transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ValidEditingResult extends "
            },
            {
              "kind": "Reference",
              "text": "EditingResultBase",
              "canonicalReference": "@fluid-experimental/tree!EditingResultBase:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "ValidEditingResult",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ValidEditingResult#after:member",
              "docComment": "/**\n * The new revision produced by the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly after: "
                },
                {
                  "kind": "Reference",
                  "text": "RevisionView",
                  "canonicalReference": "@fluid-experimental/tree!RevisionView:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "after",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@fluid-experimental/tree!ValidEditingResult#status:member",
              "docComment": "/**\n * The final status of the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly status: "
                },
                {
                  "kind": "Reference",
                  "text": "EditStatus.Applied",
                  "canonicalReference": "@fluid-experimental/tree!EditStatus.Applied:member"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@fluid-experimental/tree!WriteFormat:enum",
          "docComment": "/**\n * Format versions that SharedTree supports writing. Changes to op or summary formats necessitate updates.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum WriteFormat "
            }
          ],
          "releaseTag": "Public",
          "name": "WriteFormat",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!WriteFormat.v0_0_2:member",
              "docComment": "/**\n * Stores all edits in their raw format.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "v0_0_2 = "
                },
                {
                  "kind": "Content",
                  "text": "\"0.0.2\""
                }
              ],
              "releaseTag": "Public",
              "name": "v0_0_2",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@fluid-experimental/tree!WriteFormat.v0_1_1:member",
              "docComment": "/**\n * Supports history virtualization, tree compression, string interning, and makes currentView optional.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "v0_1_1 = "
                },
                {
                  "kind": "Content",
                  "text": "\"0.1.1\""
                }
              ],
              "releaseTag": "Public",
              "name": "v0_1_1",
              "initializerTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ]
        }
      ]
    }
  ]
}
