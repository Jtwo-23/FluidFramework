{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.22.2",
    "schemaVersion": 1005,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@fluid-internal/quorum!",
  "docComment": "",
  "name": "@fluid-internal/quorum",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@fluid-internal/quorum!",
      "name": "",
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-internal/quorum!IQuorum:interface",
          "docComment": "/**\n * An IQuorum is a key-value storage, in which setting a value requires all connected collaborators to observe and ack the set message. As a result, the value goes through two phases - \"pending\" state where the local client has seen the set, but not all connected clients have, and \"accepted\" where all connected clients have seen the set.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IQuorum extends "
            },
            {
              "kind": "Reference",
              "text": "ISharedObject",
              "canonicalReference": "@fluidframework/shared-object-base!ISharedObject:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IQuorumEvents",
              "canonicalReference": "@fluid-internal/quorum!IQuorumEvents:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "name": "IQuorum",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-internal/quorum!IQuorum#delete:member(1)",
              "docComment": "/**\n * Deletes the key/value pair at the given key. After issuing the delete, the delete is in \"pending\" state until all connected clients have ack'd the delete. The accepted value remains unchanged until that time.\n *\n * @param key - the key to delete\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "delete"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-internal/quorum!IQuorum#get:member(1)",
              "docComment": "/**\n * Gets the accepted value for the given key.\n *\n * @param key - The key to retrieve from\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "get"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-internal/quorum!IQuorum#getPending:member(1)",
              "docComment": "/**\n * Gets the pending value for the given key.\n *\n * @param key - The key to retrieve from\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPending(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getPending"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-internal/quorum!IQuorum#has:member(1)",
              "docComment": "/**\n * Checks if the quorum has an accepted value for the given key.\n *\n * @param key - The key to check\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "has(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "has"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@fluid-internal/quorum!IQuorum#set:member(1)",
              "docComment": "/**\n * Sets the value for the given key. After setting the value, it will be in \"pending\" state until all connected clients have ack'd the set. The accepted value remains unchanged until that time.\n *\n * @param key - The key to set\n *\n * @param value - The value to store\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "set"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 4
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@fluid-internal/quorum!IQuorumEvents:interface",
          "docComment": "/**\n * IQuorumEvents are the events fired by an IQuorum.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface IQuorumEvents extends "
            },
            {
              "kind": "Reference",
              "text": "ISharedObjectEvents",
              "canonicalReference": "@fluidframework/shared-object-base!ISharedObjectEvents:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "IQuorumEvents",
          "members": [
            {
              "kind": "CallSignature",
              "canonicalReference": "@fluid-internal/quorum!IQuorumEvents:call(1)",
              "docComment": "/**\n * Notifies when a new value goes pending or has been accepted.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "(event: "
                },
                {
                  "kind": "Content",
                  "text": "\"pending\" | \"accepted\""
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(key: string) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ]
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 2
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "@fluid-internal/quorum!Quorum:class",
          "docComment": "/**\n * The Quorum distributed data structure provides key/value storage with a cautious conflict resolution strategy. This strategy optimizes for all clients being aware of the change prior to considering the value as accepted.\n *\n * It is still experimental and under development. Please do try it out, but expect breaking changes in the future.\n *\n * @remarks\n *\n * ### Creation\n *\n * To create a `Quorum`, call the static create method:\n * ```typescript\n * const quorum = Quorum.create(this.runtime, id);\n * ```\n *\n * ### Usage\n *\n * Setting and reading values is somewhat similar to a `SharedMap`. However, because the acceptance strategy cannot be resolved until other clients have witnessed the set, the new value will only be reflected in the data after the consensus is reached.\n * ```typescript\n * quorum.on(\"pending\", (key: string) => {\n *     console.log(quorum.getPending(key));\n * });\n * quorum.on(\"accepted\", (key: string) => {\n *     console.log(quorum.get(key));\n * });\n * quorum.set(\"myKey\", \"myValue\");\n *\n * // Reading from the quorum prior to the async operation's completion will still return the old value.\n * console.log(quorum.get(\"myKey\"));\n * ```\n *\n * The acceptance process has two stages. When an op indicating a client's attempt to set a value is sequenced, we first verify that it was set with knowledge of the most recently accepted value (consensus-like FWW). If it meets this bar, then the value is \"pending\". During this time, clients may observe the pending value and act upon it, but should be aware that not all other clients may have witnessed the value yet. Once all clients that were connected at the time of the value being set have explicitly acknowledged the new value, the value becomes \"accepted\". Once the value is accepted, it once again becomes possible to set the value, again with consensus-like FWW resolution.\n *\n * ### Eventing\n *\n * `Quorum` is an `EventEmitter`, and will emit events when a new value is accepted for a key.\n * ```typescript\n * quorum.on(\"accept\", (key: string) => {\n *     console.log(`New value was accepted for key: ${ key }, value: ${ quorum.get(key) }`);\n * });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Quorum extends "
            },
            {
              "kind": "Reference",
              "text": "SharedObject",
              "canonicalReference": "@fluidframework/shared-object-base!SharedObject:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "IQuorumEvents",
              "canonicalReference": "@fluid-internal/quorum!IQuorumEvents:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "IQuorum",
              "canonicalReference": "@fluid-internal/quorum!IQuorum:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Quorum",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@fluid-internal/quorum!Quorum:constructor(1)",
              "docComment": "/**\n * Constructs a new quorum. If the object is non-local an id and service interfaces will be provided\n *\n * @param runtime - data store runtime the quorum belongs to\n *\n * @param id - optional name of the quorum\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", runtime: "
                },
                {
                  "kind": "Reference",
                  "text": "IFluidDataStoreRuntime",
                  "canonicalReference": "@fluidframework/datastore-definitions!IFluidDataStoreRuntime:interface"
                },
                {
                  "kind": "Content",
                  "text": ", attributes: "
                },
                {
                  "kind": "Reference",
                  "text": "IChannelAttributes",
                  "canonicalReference": "@fluidframework/datastore-definitions!IChannelAttributes:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "runtime",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "attributes",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  },
                  "isOptional": false
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-internal/quorum!Quorum#applyStashedOp:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "applyStashedOp(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "applyStashedOp"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-internal/quorum!Quorum.create:member(1)",
              "docComment": "/**\n * Create a new Quorum\n *\n * @param runtime - data store runtime the new quorum belongs to\n *\n * @param id - optional name of the quorum\n *\n * @returns newly created quorum (but not attached yet)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static create(runtime: "
                },
                {
                  "kind": "Reference",
                  "text": "IFluidDataStoreRuntime",
                  "canonicalReference": "@fluidframework/datastore-definitions!IFluidDataStoreRuntime:interface"
                },
                {
                  "kind": "Content",
                  "text": ", id?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Quorum",
                  "canonicalReference": "@fluid-internal/quorum!Quorum:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "runtime",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": true
                }
              ],
              "name": "create"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-internal/quorum!Quorum#delete:member(1)",
              "docComment": "/**\n * Deletes the key/value pair at the given key. After issuing the delete, the delete is in \"pending\" state until all connected clients have ack'd the delete. The accepted value remains unchanged until that time.\n *\n * @param key - the key to delete\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "delete(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "delete"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-internal/quorum!Quorum#get:member(1)",
              "docComment": "/**\n * Gets the accepted value for the given key.\n *\n * @param key - The key to retrieve from\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-internal/quorum!Quorum.getFactory:member(1)",
              "docComment": "/**\n * Get a factory for Quorum to register with the data store.\n *\n * @returns a factory that creates and load Quorum\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static getFactory(): "
                },
                {
                  "kind": "Reference",
                  "text": "IChannelFactory",
                  "canonicalReference": "@fluidframework/datastore-definitions!IChannelFactory:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getFactory"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-internal/quorum!Quorum#getPending:member(1)",
              "docComment": "/**\n * Gets the pending value for the given key.\n *\n * @param key - The key to retrieve from\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getPending(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "getPending"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-internal/quorum!Quorum#has:member(1)",
              "docComment": "/**\n * Checks if the quorum has an accepted value for the given key.\n *\n * @param key - The key to check\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "has(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                }
              ],
              "name": "has"
            },
            {
              "kind": "Method",
              "canonicalReference": "@fluid-internal/quorum!Quorum#set:member(1)",
              "docComment": "/**\n * Sets the value for the given key. After setting the value, it will be in \"pending\" state until all connected clients have ack'd the set. The accepted value remains unchanged until that time.\n *\n * @param key - The key to set\n *\n * @param value - The value to store\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isOptional": false
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  },
                  "isOptional": false
                }
              ],
              "name": "set"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          },
          "implementsTokenRanges": [
            {
              "startIndex": 6,
              "endIndex": 7
            }
          ]
        }
      ]
    }
  ]
}
